-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple_calculator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (4 downto 0);
    b : IN STD_LOGIC_VECTOR (4 downto 0);
    hex_dec : IN STD_LOGIC_VECTOR (0 downto 0);
    code : IN STD_LOGIC_VECTOR (3 downto 0);
    select_digit : IN STD_LOGIC_VECTOR (3 downto 0);
    leds : OUT STD_LOGIC_VECTOR (15 downto 0);
    segment_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    segment_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of simple_calculator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple_calculator_simple_calculator,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016500,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=772,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_67 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_99 : STD_LOGIC_VECTOR (7 downto 0) := "10011001";
    constant ap_const_lv8_92 : STD_LOGIC_VECTOR (7 downto 0) := "10010010";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_C6 : STD_LOGIC_VECTOR (7 downto 0) := "11000110";
    constant ap_const_lv8_86 : STD_LOGIC_VECTOR (7 downto 0) := "10000110";
    constant ap_const_lv8_8E : STD_LOGIC_VECTOR (7 downto 0) := "10001110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result_14_fu_442_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_14_reg_947 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal hex_dec_read_read_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_463_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_1_reg_969 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_977 : STD_LOGIC_VECTOR (2 downto 0);
    signal ref_tmp5_i_div10_fu_246_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ref_tmp5_i_reg_983 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ref_tmp11_i_div10_fu_251_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ref_tmp11_i_reg_989 : STD_LOGIC_VECTOR (1 downto 0);
    signal ref_tmp19_i_div10_fu_256_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ref_tmp19_i_reg_995 : STD_LOGIC_VECTOR (1 downto 0);
    signal d0_1_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal d1_fu_581_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal d2_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_fu_628_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_1_fu_641_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ref_tmp5_i_div10_fu_246_ap_ready : STD_LOGIC;
    signal ref_tmp11_i_div10_fu_251_ap_ready : STD_LOGIC;
    signal ref_tmp11_i_div10_fu_251_r_val : STD_LOGIC_VECTOR (5 downto 0);
    signal ref_tmp19_i_div10_fu_256_ap_ready : STD_LOGIC;
    signal d0_3_reg_217 : STD_LOGIC_VECTOR (6 downto 0);
    signal d1_2_reg_226 : STD_LOGIC_VECTOR (6 downto 0);
    signal d2_2_reg_235 : STD_LOGIC_VECTOR (6 downto 0);
    signal segment_enable_local_fu_645_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_data_local_fu_908_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln47_fu_262_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln47_1_fu_266_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln47_1_fu_266_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln47_fu_262_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_2_fu_282_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_2_fu_282_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_2_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_3_fu_292_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_3_fu_292_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_3_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_4_fu_302_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_5_fu_312_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_5_fu_312_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_5_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_6_fu_322_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_6_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln43_fu_332_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_4_fu_328_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_7_fu_344_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_3_fu_318_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_8_fu_358_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_3_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_2_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_9_fu_372_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_4_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_1_fu_298_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_10_fu_386_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_5_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln10_fu_288_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_11_fu_400_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_6_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_1_fu_276_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_12_fu_414_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_7_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_13_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_fu_458_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln41_fu_473_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln41_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln41_fu_473_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_496_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_1_fu_503_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln40_fu_507_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln40_1_fu_517_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln40_fu_513_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_fu_524_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln40_1_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_fu_493_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_543_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln43_1_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln43_1_fu_554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln43_1_fu_564_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln43_fu_560_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln43_2_fu_571_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln43_2_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln43_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln2_fu_587_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_fu_594_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln46_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln46_1_fu_608_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln46_fu_604_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_1_fu_615_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal d0_fu_625_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_632_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_669_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_669_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_i_fu_684_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_i1_fu_760_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_i2_fu_836_p35 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal mul_ln41_fu_473_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal segment_enable_local_fu_645_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_enable_local_fu_645_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_enable_local_fu_645_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_enable_local_fu_645_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_i_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p13 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p21 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p23 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p25 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i_fu_684_p31 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p13 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p21 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p23 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p25 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i1_fu_760_p31 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p13 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p21 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p23 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p25 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p27 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p29 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_i2_fu_836_p31 : STD_LOGIC_VECTOR (31 downto 0);
    signal segment_data_local_fu_908_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_data_local_fu_908_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_data_local_fu_908_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal segment_data_local_fu_908_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component simple_calculator_div10 IS
    port (
        ap_ready : OUT STD_LOGIC;
        r_val : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component simple_calculator_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component simple_calculator_sparsemux_9_4_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        def : IN STD_LOGIC_VECTOR (3 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component simple_calculator_sparsemux_33_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (31 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (31 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (31 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (31 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (31 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (31 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (31 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (31 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (31 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (31 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (31 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (31 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (31 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (31 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (31 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (31 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component simple_calculator_sparsemux_9_4_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ref_tmp5_i_div10_fu_246 : component simple_calculator_div10
    port map (
        ap_ready => ref_tmp5_i_div10_fu_246_ap_ready,
        r_val => r_1_reg_969,
        ap_return => ref_tmp5_i_div10_fu_246_ap_return);

    ref_tmp11_i_div10_fu_251 : component simple_calculator_div10
    port map (
        ap_ready => ref_tmp11_i_div10_fu_251_ap_ready,
        r_val => ref_tmp11_i_div10_fu_251_r_val,
        ap_return => ref_tmp11_i_div10_fu_251_ap_return);

    ref_tmp19_i_div10_fu_256 : component simple_calculator_div10
    port map (
        ap_ready => ref_tmp19_i_div10_fu_256_ap_ready,
        r_val => ap_const_lv6_0,
        ap_return => ref_tmp19_i_div10_fu_256_ap_return);

    mul_6ns_8ns_13_1_1_U4 : component simple_calculator_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln41_fu_473_p0,
        din1 => mul_ln41_fu_473_p1,
        dout => mul_ln41_fu_473_p2);

    sparsemux_9_4_4_1_1_U5 : component simple_calculator_sparsemux_9_4_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 4,
        CASE1 => "0010",
        din1_WIDTH => 4,
        CASE2 => "0100",
        din2_WIDTH => 4,
        CASE3 => "1000",
        din3_WIDTH => 4,
        def_WIDTH => 4,
        sel_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_E,
        din1 => ap_const_lv4_D,
        din2 => ap_const_lv4_B,
        din3 => ap_const_lv4_7,
        def => ap_const_lv4_F,
        sel => select_digit,
        dout => segment_enable_local_fu_645_p11);

    sparsemux_33_32_8_1_1_U6 : component simple_calculator_sparsemux_33_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000000000000000000000000000000",
        din0_WIDTH => 8,
        CASE1 => "00000000000000000000000000000001",
        din1_WIDTH => 8,
        CASE2 => "00000000000000000000000000000010",
        din2_WIDTH => 8,
        CASE3 => "00000000000000000000000000000011",
        din3_WIDTH => 8,
        CASE4 => "00000000000000000000000000000100",
        din4_WIDTH => 8,
        CASE5 => "00000000000000000000000000000101",
        din5_WIDTH => 8,
        CASE6 => "00000000000000000000000000000110",
        din6_WIDTH => 8,
        CASE7 => "00000000000000000000000000000111",
        din7_WIDTH => 8,
        CASE8 => "00000000000000000000000000001000",
        din8_WIDTH => 8,
        CASE9 => "00000000000000000000000000001001",
        din9_WIDTH => 8,
        CASE10 => "00000000000000000000000000001010",
        din10_WIDTH => 8,
        CASE11 => "00000000000000000000000000001011",
        din11_WIDTH => 8,
        CASE12 => "00000000000000000000000000001100",
        din12_WIDTH => 8,
        CASE13 => "00000000000000000000000000001101",
        din13_WIDTH => 8,
        CASE14 => "00000000000000000000000000001110",
        din14_WIDTH => 8,
        CASE15 => "00000000000000000000000000001111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_C0,
        din1 => ap_const_lv8_F9,
        din2 => ap_const_lv8_A4,
        din3 => ap_const_lv8_B0,
        din4 => ap_const_lv8_99,
        din5 => ap_const_lv8_92,
        din6 => ap_const_lv8_82,
        din7 => ap_const_lv8_F8,
        din8 => ap_const_lv8_80,
        din9 => ap_const_lv8_90,
        din10 => ap_const_lv8_88,
        din11 => ap_const_lv8_83,
        din12 => ap_const_lv8_C6,
        din13 => ap_const_lv8_C6,
        din14 => ap_const_lv8_86,
        din15 => ap_const_lv8_8E,
        def => ap_const_lv8_FF,
        sel => agg_result_i_fu_684_p34,
        dout => agg_result_i_fu_684_p35);

    sparsemux_33_32_8_1_1_U7 : component simple_calculator_sparsemux_33_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000000000000000000000000000000",
        din0_WIDTH => 8,
        CASE1 => "00000000000000000000000000000001",
        din1_WIDTH => 8,
        CASE2 => "00000000000000000000000000000010",
        din2_WIDTH => 8,
        CASE3 => "00000000000000000000000000000011",
        din3_WIDTH => 8,
        CASE4 => "00000000000000000000000000000100",
        din4_WIDTH => 8,
        CASE5 => "00000000000000000000000000000101",
        din5_WIDTH => 8,
        CASE6 => "00000000000000000000000000000110",
        din6_WIDTH => 8,
        CASE7 => "00000000000000000000000000000111",
        din7_WIDTH => 8,
        CASE8 => "00000000000000000000000000001000",
        din8_WIDTH => 8,
        CASE9 => "00000000000000000000000000001001",
        din9_WIDTH => 8,
        CASE10 => "00000000000000000000000000001010",
        din10_WIDTH => 8,
        CASE11 => "00000000000000000000000000001011",
        din11_WIDTH => 8,
        CASE12 => "00000000000000000000000000001100",
        din12_WIDTH => 8,
        CASE13 => "00000000000000000000000000001101",
        din13_WIDTH => 8,
        CASE14 => "00000000000000000000000000001110",
        din14_WIDTH => 8,
        CASE15 => "00000000000000000000000000001111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_C0,
        din1 => ap_const_lv8_F9,
        din2 => ap_const_lv8_A4,
        din3 => ap_const_lv8_B0,
        din4 => ap_const_lv8_99,
        din5 => ap_const_lv8_92,
        din6 => ap_const_lv8_82,
        din7 => ap_const_lv8_F8,
        din8 => ap_const_lv8_80,
        din9 => ap_const_lv8_90,
        din10 => ap_const_lv8_88,
        din11 => ap_const_lv8_83,
        din12 => ap_const_lv8_C6,
        din13 => ap_const_lv8_C6,
        din14 => ap_const_lv8_86,
        din15 => ap_const_lv8_8E,
        def => ap_const_lv8_FF,
        sel => agg_result_i1_fu_760_p34,
        dout => agg_result_i1_fu_760_p35);

    sparsemux_33_32_8_1_1_U8 : component simple_calculator_sparsemux_33_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000000000000000000000000000000",
        din0_WIDTH => 8,
        CASE1 => "00000000000000000000000000000001",
        din1_WIDTH => 8,
        CASE2 => "00000000000000000000000000000010",
        din2_WIDTH => 8,
        CASE3 => "00000000000000000000000000000011",
        din3_WIDTH => 8,
        CASE4 => "00000000000000000000000000000100",
        din4_WIDTH => 8,
        CASE5 => "00000000000000000000000000000101",
        din5_WIDTH => 8,
        CASE6 => "00000000000000000000000000000110",
        din6_WIDTH => 8,
        CASE7 => "00000000000000000000000000000111",
        din7_WIDTH => 8,
        CASE8 => "00000000000000000000000000001000",
        din8_WIDTH => 8,
        CASE9 => "00000000000000000000000000001001",
        din9_WIDTH => 8,
        CASE10 => "00000000000000000000000000001010",
        din10_WIDTH => 8,
        CASE11 => "00000000000000000000000000001011",
        din11_WIDTH => 8,
        CASE12 => "00000000000000000000000000001100",
        din12_WIDTH => 8,
        CASE13 => "00000000000000000000000000001101",
        din13_WIDTH => 8,
        CASE14 => "00000000000000000000000000001110",
        din14_WIDTH => 8,
        CASE15 => "00000000000000000000000000001111",
        din15_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_C0,
        din1 => ap_const_lv8_F9,
        din2 => ap_const_lv8_A4,
        din3 => ap_const_lv8_B0,
        din4 => ap_const_lv8_99,
        din5 => ap_const_lv8_92,
        din6 => ap_const_lv8_82,
        din7 => ap_const_lv8_F8,
        din8 => ap_const_lv8_80,
        din9 => ap_const_lv8_90,
        din10 => ap_const_lv8_88,
        din11 => ap_const_lv8_83,
        din12 => ap_const_lv8_C6,
        din13 => ap_const_lv8_C6,
        din14 => ap_const_lv8_86,
        din15 => ap_const_lv8_8E,
        def => ap_const_lv8_FF,
        sel => agg_result_i2_fu_836_p34,
        dout => agg_result_i2_fu_836_p35);

    sparsemux_9_4_8_1_1_U9 : component simple_calculator_sparsemux_9_4_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0001",
        din0_WIDTH => 8,
        CASE1 => "0010",
        din1_WIDTH => 8,
        CASE2 => "0100",
        din2_WIDTH => 8,
        CASE3 => "1000",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => agg_result_i_fu_684_p35,
        din1 => agg_result_i1_fu_760_p35,
        din2 => agg_result_i2_fu_836_p35,
        din3 => ap_const_lv8_FF,
        def => ap_const_lv8_FF,
        sel => select_digit,
        dout => segment_data_local_fu_908_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d0_3_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_1)) then 
                    d0_3_reg_217 <= zext_ln31_fu_628_p1;
                elsif ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_0)) then 
                    d0_3_reg_217 <= d0_1_fu_534_p2;
                end if;
            end if; 
        end if;
    end process;

    d1_2_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_1)) then 
                    d1_2_reg_226 <= zext_ln31_1_fu_641_p1;
                elsif ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_0)) then 
                    d1_2_reg_226 <= d1_fu_581_p2;
                end if;
            end if; 
        end if;
    end process;

    d2_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_1)) then 
                    d2_2_reg_235(1) <= '0';
                    d2_2_reg_235(2) <= '0';
                    d2_2_reg_235(3) <= '0';
                    d2_2_reg_235(4) <= '0';
                    d2_2_reg_235(5) <= '0';
                    d2_2_reg_235(6) <= '0';
                elsif ((hex_dec_read_read_fu_190_p2 = ap_const_lv1_0)) then 
                                        d2_2_reg_235(6 downto 1) <= d2_fu_619_p2(6 downto 1);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_1_reg_969 <= r_1_fu_463_p3;
                tmp_2_reg_977 <= mul_ln41_fu_473_p2(12 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ref_tmp11_i_reg_989 <= ref_tmp11_i_div10_fu_251_ap_return;
                ref_tmp19_i_reg_995 <= ref_tmp19_i_div10_fu_256_ap_return;
                ref_tmp5_i_reg_983 <= ref_tmp5_i_div10_fu_246_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                result_14_reg_947 <= result_14_fu_442_p3;
                tmp_1_reg_953 <= result_14_fu_442_p3(5 downto 5);
            end if;
        end if;
    end process;
    d2_2_reg_235(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, hex_dec_read_read_fu_190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((hex_dec_read_read_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
        agg_result_i1_fu_760_p34 <= std_logic_vector(IEEE.numeric_std.resize(signed(d1_2_reg_226),32));

        agg_result_i2_fu_836_p34 <= std_logic_vector(IEEE.numeric_std.resize(signed(d2_2_reg_235),32));

        agg_result_i_fu_684_p34 <= std_logic_vector(IEEE.numeric_std.resize(signed(d0_3_reg_217),32));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    d0_1_fu_534_p2 <= std_logic_vector(unsigned(sub_ln40_1_fu_528_p2) + unsigned(zext_ln40_fu_493_p1));
    d0_fu_625_p1 <= r_1_reg_969(4 - 1 downto 0);
    d1_fu_581_p2 <= std_logic_vector(unsigned(sub_ln43_2_fu_575_p2) + unsigned(zext_ln43_fu_540_p1));
    d2_fu_619_p2 <= std_logic_vector(signed(sext_ln46_fu_604_p1) - signed(zext_ln46_1_fu_615_p1));
    hex_dec_read_read_fu_190_p2 <= hex_dec;
    icmp_ln12_1_fu_352_p2 <= "1" when (code = ap_const_lv4_6) else "0";
    icmp_ln12_2_fu_366_p2 <= "1" when (code = ap_const_lv4_5) else "0";
    icmp_ln12_3_fu_380_p2 <= "1" when (code = ap_const_lv4_4) else "0";
    icmp_ln12_4_fu_394_p2 <= "1" when (code = ap_const_lv4_3) else "0";
    icmp_ln12_5_fu_408_p2 <= "1" when (code = ap_const_lv4_2) else "0";
    icmp_ln12_6_fu_422_p2 <= "1" when (code = ap_const_lv4_1) else "0";
    icmp_ln12_7_fu_436_p2 <= "1" when (code = ap_const_lv4_0) else "0";
    icmp_ln12_fu_338_p2 <= "1" when (code = ap_const_lv4_7) else "0";
    leds <= ((((code & hex_dec) & ap_const_lv1_0) & tmp_5_fu_669_p4) & tmp_5_fu_669_p5);
    mul_ln41_fu_473_p0 <= mul_ln41_fu_473_p00(6 - 1 downto 0);
    mul_ln41_fu_473_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_463_p3),13));
    mul_ln41_fu_473_p1 <= ap_const_lv13_67(8 - 1 downto 0);
    r_1_fu_463_p3 <= 
        r_fu_458_p2 when (tmp_1_reg_953(0) = '1') else 
        result_14_reg_947;
    r_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(result_14_reg_947));
    ref_tmp11_i_div10_fu_251_r_val <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_977),6));
    result_10_fu_386_p3 <= 
        sext_ln10_2_fu_308_p1 when (icmp_ln12_3_fu_380_p2(0) = '1') else 
        result_9_fu_372_p3;
    result_11_fu_400_p3 <= 
        sext_ln10_1_fu_298_p1 when (icmp_ln12_4_fu_394_p2(0) = '1') else 
        result_10_fu_386_p3;
    result_12_fu_414_p3 <= 
        sext_ln10_fu_288_p1 when (icmp_ln12_5_fu_408_p2(0) = '1') else 
        result_11_fu_400_p3;
    result_13_fu_428_p3 <= 
        result_1_fu_276_p2 when (icmp_ln12_6_fu_422_p2(0) = '1') else 
        result_12_fu_414_p3;
    result_14_fu_442_p3 <= 
        result_fu_270_p2 when (icmp_ln12_7_fu_436_p2(0) = '1') else 
        result_13_fu_428_p3;
    result_1_fu_276_p2 <= std_logic_vector(signed(sext_ln47_fu_262_p1) - signed(sext_ln47_1_fu_266_p1));
    result_2_fu_282_p0 <= b;
    result_2_fu_282_p1 <= a;
    result_2_fu_282_p2 <= (result_2_fu_282_p1 and result_2_fu_282_p0);
    result_3_fu_292_p0 <= b;
    result_3_fu_292_p1 <= a;
    result_3_fu_292_p2 <= (result_3_fu_292_p1 or result_3_fu_292_p0);
    result_4_fu_302_p2 <= (result_2_fu_282_p2 xor ap_const_lv5_1F);
    result_5_fu_312_p0 <= b;
    result_5_fu_312_p1 <= a;
    result_5_fu_312_p2 <= (result_5_fu_312_p1 xor result_5_fu_312_p0);
    result_6_fu_322_p0 <= a;
    result_6_fu_322_p2 <= (result_6_fu_322_p0 xor ap_const_lv5_1F);
    result_7_fu_344_p3 <= 
        sub_ln43_fu_332_p2 when (icmp_ln12_fu_338_p2(0) = '1') else 
        result_fu_270_p2;
    result_8_fu_358_p3 <= 
        sext_ln10_4_fu_328_p1 when (icmp_ln12_1_fu_352_p2(0) = '1') else 
        result_7_fu_344_p3;
    result_9_fu_372_p3 <= 
        sext_ln10_3_fu_318_p1 when (icmp_ln12_2_fu_366_p2(0) = '1') else 
        result_8_fu_358_p3;
    result_fu_270_p2 <= std_logic_vector(signed(sext_ln47_1_fu_266_p1) + signed(sext_ln47_fu_262_p1));
    segment_data <= segment_data_local_fu_908_p11;
    segment_enable <= segment_enable_local_fu_645_p11;
        sext_ln10_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_3_fu_292_p2),6));

        sext_ln10_2_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_4_fu_302_p2),6));

        sext_ln10_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_5_fu_312_p2),6));

        sext_ln10_4_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_6_fu_322_p2),6));

        sext_ln10_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_2_fu_282_p2),6));

        sext_ln40_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln40_fu_507_p2),7));

        sext_ln43_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln43_1_fu_554_p2),7));

        sext_ln46_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln46_fu_598_p2),7));

    sext_ln47_1_fu_266_p0 <= b;
        sext_ln47_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln47_1_fu_266_p0),6));

    sext_ln47_fu_262_p0 <= a;
        sext_ln47_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln47_fu_262_p0),6));

    shl_ln1_fu_543_p3 <= (ref_tmp11_i_reg_989 & ap_const_lv3_0);
    shl_ln2_fu_587_p3 <= (ref_tmp19_i_reg_995 & ap_const_lv3_0);
    shl_ln40_1_fu_517_p3 <= (ref_tmp5_i_reg_983 & ap_const_lv1_0);
    shl_ln43_1_fu_564_p3 <= (ref_tmp11_i_reg_989 & ap_const_lv1_0);
    shl_ln46_1_fu_608_p3 <= (ref_tmp19_i_reg_995 & ap_const_lv1_0);
    shl_ln_fu_496_p3 <= (ref_tmp5_i_reg_983 & ap_const_lv3_0);
    sub_ln40_1_fu_528_p2 <= std_logic_vector(signed(sext_ln40_fu_513_p1) - signed(zext_ln40_2_fu_524_p1));
    sub_ln40_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln40_1_fu_503_p1));
    sub_ln43_1_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln43_1_fu_550_p1));
    sub_ln43_2_fu_575_p2 <= std_logic_vector(signed(sext_ln43_fu_560_p1) - signed(zext_ln43_2_fu_571_p1));
    sub_ln43_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(sext_ln47_fu_262_p1));
    sub_ln46_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln46_fu_594_p1));
    tmp_5_fu_669_p4 <= b;
    tmp_5_fu_669_p5 <= a;
    tmp_fu_632_p4 <= r_1_reg_969(5 downto 4);
    zext_ln31_1_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_632_p4),7));
    zext_ln31_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d0_fu_625_p1),7));
    zext_ln40_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_496_p3),6));
    zext_ln40_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln40_1_fu_517_p3),7));
    zext_ln40_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_969),7));
    zext_ln43_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_543_p3),6));
    zext_ln43_2_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln43_1_fu_564_p3),7));
    zext_ln43_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_977),7));
    zext_ln46_1_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln46_1_fu_608_p3),7));
    zext_ln46_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_587_p3),6));
end behav;
