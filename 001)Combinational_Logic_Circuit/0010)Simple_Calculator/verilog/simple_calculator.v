// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simple_calculator_simple_calculator,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.016500,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=772,HLS_VERSION=2023_2}" *)

module simple_calculator (
        ap_clk,
        ap_rst,
        a,
        b,
        hex_dec,
        code,
        select_digit,
        leds,
        segment_data,
        segment_enable
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input  [4:0] a;
input  [4:0] b;
input  [0:0] hex_dec;
input  [3:0] code;
input  [3:0] select_digit;
output  [15:0] leds;
output  [7:0] segment_data;
output  [3:0] segment_enable;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] result_14_fu_442_p3;
reg   [5:0] result_14_reg_947;
reg   [0:0] tmp_1_reg_953;
wire    ap_CS_fsm_state2;
wire   [0:0] hex_dec_read_read_fu_190_p2;
wire   [5:0] r_1_fu_463_p3;
reg   [5:0] r_1_reg_969;
reg   [2:0] tmp_2_reg_977;
wire   [1:0] ref_tmp5_i_div10_fu_246_ap_return;
reg   [1:0] ref_tmp5_i_reg_983;
wire    ap_CS_fsm_state3;
wire   [1:0] ref_tmp11_i_div10_fu_251_ap_return;
reg   [1:0] ref_tmp11_i_reg_989;
wire   [1:0] ref_tmp19_i_div10_fu_256_ap_return;
reg   [1:0] ref_tmp19_i_reg_995;
wire   [6:0] d0_1_fu_534_p2;
wire    ap_CS_fsm_state4;
wire   [6:0] d1_fu_581_p2;
wire   [6:0] d2_fu_619_p2;
wire   [6:0] zext_ln31_fu_628_p1;
wire   [6:0] zext_ln31_1_fu_641_p1;
wire    ref_tmp5_i_div10_fu_246_ap_ready;
wire    ref_tmp11_i_div10_fu_251_ap_ready;
wire   [5:0] ref_tmp11_i_div10_fu_251_r_val;
wire    ref_tmp19_i_div10_fu_256_ap_ready;
reg   [6:0] d0_3_reg_217;
reg   [6:0] d1_2_reg_226;
reg   [6:0] d2_2_reg_235;
wire   [3:0] segment_enable_local_fu_645_p11;
wire   [7:0] segment_data_local_fu_908_p11;
wire    ap_CS_fsm_state5;
wire  signed [4:0] sext_ln47_fu_262_p0;
wire  signed [4:0] sext_ln47_1_fu_266_p0;
wire  signed [5:0] sext_ln47_1_fu_266_p1;
wire  signed [5:0] sext_ln47_fu_262_p1;
wire  signed [4:0] result_2_fu_282_p0;
wire  signed [4:0] result_2_fu_282_p1;
wire  signed [4:0] result_2_fu_282_p2;
wire  signed [4:0] result_3_fu_292_p0;
wire  signed [4:0] result_3_fu_292_p1;
wire   [4:0] result_3_fu_292_p2;
wire   [4:0] result_4_fu_302_p2;
wire  signed [4:0] result_5_fu_312_p0;
wire  signed [4:0] result_5_fu_312_p1;
wire   [4:0] result_5_fu_312_p2;
wire  signed [4:0] result_6_fu_322_p0;
wire   [4:0] result_6_fu_322_p2;
wire   [0:0] icmp_ln12_fu_338_p2;
wire   [5:0] sub_ln43_fu_332_p2;
wire   [5:0] result_fu_270_p2;
wire   [0:0] icmp_ln12_1_fu_352_p2;
wire  signed [5:0] sext_ln10_4_fu_328_p1;
wire   [5:0] result_7_fu_344_p3;
wire   [0:0] icmp_ln12_2_fu_366_p2;
wire  signed [5:0] sext_ln10_3_fu_318_p1;
wire   [5:0] result_8_fu_358_p3;
wire   [0:0] icmp_ln12_3_fu_380_p2;
wire  signed [5:0] sext_ln10_2_fu_308_p1;
wire   [5:0] result_9_fu_372_p3;
wire   [0:0] icmp_ln12_4_fu_394_p2;
wire  signed [5:0] sext_ln10_1_fu_298_p1;
wire   [5:0] result_10_fu_386_p3;
wire   [0:0] icmp_ln12_5_fu_408_p2;
wire  signed [5:0] sext_ln10_fu_288_p1;
wire   [5:0] result_11_fu_400_p3;
wire   [0:0] icmp_ln12_6_fu_422_p2;
wire   [5:0] result_1_fu_276_p2;
wire   [5:0] result_12_fu_414_p3;
wire   [0:0] icmp_ln12_7_fu_436_p2;
wire   [5:0] result_13_fu_428_p3;
wire   [5:0] r_fu_458_p2;
wire   [5:0] mul_ln41_fu_473_p0;
wire   [7:0] mul_ln41_fu_473_p1;
wire   [12:0] mul_ln41_fu_473_p2;
wire   [4:0] shl_ln_fu_496_p3;
wire   [5:0] zext_ln40_1_fu_503_p1;
wire   [5:0] sub_ln40_fu_507_p2;
wire   [2:0] shl_ln40_1_fu_517_p3;
wire  signed [6:0] sext_ln40_fu_513_p1;
wire   [6:0] zext_ln40_2_fu_524_p1;
wire   [6:0] sub_ln40_1_fu_528_p2;
wire   [6:0] zext_ln40_fu_493_p1;
wire   [4:0] shl_ln1_fu_543_p3;
wire   [5:0] zext_ln43_1_fu_550_p1;
wire   [5:0] sub_ln43_1_fu_554_p2;
wire   [2:0] shl_ln43_1_fu_564_p3;
wire  signed [6:0] sext_ln43_fu_560_p1;
wire   [6:0] zext_ln43_2_fu_571_p1;
wire   [6:0] sub_ln43_2_fu_575_p2;
wire   [6:0] zext_ln43_fu_540_p1;
wire   [4:0] shl_ln2_fu_587_p3;
wire   [5:0] zext_ln46_fu_594_p1;
wire   [5:0] sub_ln46_fu_598_p2;
wire   [2:0] shl_ln46_1_fu_608_p3;
wire  signed [6:0] sext_ln46_fu_604_p1;
wire   [6:0] zext_ln46_1_fu_615_p1;
wire   [3:0] d0_fu_625_p1;
wire   [1:0] tmp_fu_632_p4;
wire  signed [4:0] tmp_5_fu_669_p4;
wire  signed [4:0] tmp_5_fu_669_p5;
wire  signed [31:0] agg_result_i_fu_684_p34;
wire  signed [31:0] agg_result_i1_fu_760_p34;
wire  signed [31:0] agg_result_i2_fu_836_p34;
wire   [7:0] agg_result_i_fu_684_p35;
wire   [7:0] agg_result_i1_fu_760_p35;
wire   [7:0] agg_result_i2_fu_836_p35;
reg   [4:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire   [12:0] mul_ln41_fu_473_p00;
wire   [3:0] segment_enable_local_fu_645_p1;
wire   [3:0] segment_enable_local_fu_645_p3;
wire   [3:0] segment_enable_local_fu_645_p5;
wire  signed [3:0] segment_enable_local_fu_645_p7;
wire   [31:0] agg_result_i_fu_684_p1;
wire   [31:0] agg_result_i_fu_684_p3;
wire   [31:0] agg_result_i_fu_684_p5;
wire   [31:0] agg_result_i_fu_684_p7;
wire   [31:0] agg_result_i_fu_684_p9;
wire   [31:0] agg_result_i_fu_684_p11;
wire   [31:0] agg_result_i_fu_684_p13;
wire   [31:0] agg_result_i_fu_684_p15;
wire   [31:0] agg_result_i_fu_684_p17;
wire   [31:0] agg_result_i_fu_684_p19;
wire   [31:0] agg_result_i_fu_684_p21;
wire   [31:0] agg_result_i_fu_684_p23;
wire   [31:0] agg_result_i_fu_684_p25;
wire   [31:0] agg_result_i_fu_684_p27;
wire   [31:0] agg_result_i_fu_684_p29;
wire   [31:0] agg_result_i_fu_684_p31;
wire   [31:0] agg_result_i1_fu_760_p1;
wire   [31:0] agg_result_i1_fu_760_p3;
wire   [31:0] agg_result_i1_fu_760_p5;
wire   [31:0] agg_result_i1_fu_760_p7;
wire   [31:0] agg_result_i1_fu_760_p9;
wire   [31:0] agg_result_i1_fu_760_p11;
wire   [31:0] agg_result_i1_fu_760_p13;
wire   [31:0] agg_result_i1_fu_760_p15;
wire   [31:0] agg_result_i1_fu_760_p17;
wire   [31:0] agg_result_i1_fu_760_p19;
wire   [31:0] agg_result_i1_fu_760_p21;
wire   [31:0] agg_result_i1_fu_760_p23;
wire   [31:0] agg_result_i1_fu_760_p25;
wire   [31:0] agg_result_i1_fu_760_p27;
wire   [31:0] agg_result_i1_fu_760_p29;
wire   [31:0] agg_result_i1_fu_760_p31;
wire   [31:0] agg_result_i2_fu_836_p1;
wire   [31:0] agg_result_i2_fu_836_p3;
wire   [31:0] agg_result_i2_fu_836_p5;
wire   [31:0] agg_result_i2_fu_836_p7;
wire   [31:0] agg_result_i2_fu_836_p9;
wire   [31:0] agg_result_i2_fu_836_p11;
wire   [31:0] agg_result_i2_fu_836_p13;
wire   [31:0] agg_result_i2_fu_836_p15;
wire   [31:0] agg_result_i2_fu_836_p17;
wire   [31:0] agg_result_i2_fu_836_p19;
wire   [31:0] agg_result_i2_fu_836_p21;
wire   [31:0] agg_result_i2_fu_836_p23;
wire   [31:0] agg_result_i2_fu_836_p25;
wire   [31:0] agg_result_i2_fu_836_p27;
wire   [31:0] agg_result_i2_fu_836_p29;
wire   [31:0] agg_result_i2_fu_836_p31;
wire   [3:0] segment_data_local_fu_908_p1;
wire   [3:0] segment_data_local_fu_908_p3;
wire   [3:0] segment_data_local_fu_908_p5;
wire  signed [3:0] segment_data_local_fu_908_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

simple_calculator_div10 ref_tmp5_i_div10_fu_246(
    .ap_ready(ref_tmp5_i_div10_fu_246_ap_ready),
    .r_val(r_1_reg_969),
    .ap_return(ref_tmp5_i_div10_fu_246_ap_return)
);

simple_calculator_div10 ref_tmp11_i_div10_fu_251(
    .ap_ready(ref_tmp11_i_div10_fu_251_ap_ready),
    .r_val(ref_tmp11_i_div10_fu_251_r_val),
    .ap_return(ref_tmp11_i_div10_fu_251_ap_return)
);

simple_calculator_div10 ref_tmp19_i_div10_fu_256(
    .ap_ready(ref_tmp19_i_div10_fu_256_ap_ready),
    .r_val(6'd0),
    .ap_return(ref_tmp19_i_div10_fu_256_ap_return)
);

simple_calculator_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U4(
    .din0(mul_ln41_fu_473_p0),
    .din1(mul_ln41_fu_473_p1),
    .dout(mul_ln41_fu_473_p2)
);

simple_calculator_sparsemux_9_4_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 4 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 4 ),
    .CASE2( 4'h4 ),
    .din2_WIDTH( 4 ),
    .CASE3( 4'h8 ),
    .din3_WIDTH( 4 ),
    .def_WIDTH( 4 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
sparsemux_9_4_4_1_1_U5(
    .din0(4'd14),
    .din1(4'd13),
    .din2(4'd11),
    .din3(4'd7),
    .def(4'd15),
    .sel(select_digit),
    .dout(segment_enable_local_fu_645_p11)
);

simple_calculator_sparsemux_33_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 32'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 32'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 32'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 32'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 32'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 32'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 32'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 32'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 32'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 32'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 32'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 32'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 32'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 32'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 32'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 32'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
sparsemux_33_32_8_1_1_U6(
    .din0(8'd192),
    .din1(8'd249),
    .din2(8'd164),
    .din3(8'd176),
    .din4(8'd153),
    .din5(8'd146),
    .din6(8'd130),
    .din7(8'd248),
    .din8(8'd128),
    .din9(8'd144),
    .din10(8'd136),
    .din11(8'd131),
    .din12(8'd198),
    .din13(8'd198),
    .din14(8'd134),
    .din15(8'd142),
    .def(8'd255),
    .sel(agg_result_i_fu_684_p34),
    .dout(agg_result_i_fu_684_p35)
);

simple_calculator_sparsemux_33_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 32'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 32'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 32'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 32'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 32'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 32'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 32'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 32'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 32'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 32'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 32'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 32'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 32'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 32'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 32'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 32'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
sparsemux_33_32_8_1_1_U7(
    .din0(8'd192),
    .din1(8'd249),
    .din2(8'd164),
    .din3(8'd176),
    .din4(8'd153),
    .din5(8'd146),
    .din6(8'd130),
    .din7(8'd248),
    .din8(8'd128),
    .din9(8'd144),
    .din10(8'd136),
    .din11(8'd131),
    .din12(8'd198),
    .din13(8'd198),
    .din14(8'd134),
    .din15(8'd142),
    .def(8'd255),
    .sel(agg_result_i1_fu_760_p34),
    .dout(agg_result_i1_fu_760_p35)
);

simple_calculator_sparsemux_33_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 32'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 32'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 32'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 32'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 32'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 32'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 32'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 32'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 32'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 32'h9 ),
    .din9_WIDTH( 8 ),
    .CASE10( 32'hA ),
    .din10_WIDTH( 8 ),
    .CASE11( 32'hB ),
    .din11_WIDTH( 8 ),
    .CASE12( 32'hC ),
    .din12_WIDTH( 8 ),
    .CASE13( 32'hD ),
    .din13_WIDTH( 8 ),
    .CASE14( 32'hE ),
    .din14_WIDTH( 8 ),
    .CASE15( 32'hF ),
    .din15_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
sparsemux_33_32_8_1_1_U8(
    .din0(8'd192),
    .din1(8'd249),
    .din2(8'd164),
    .din3(8'd176),
    .din4(8'd153),
    .din5(8'd146),
    .din6(8'd130),
    .din7(8'd248),
    .din8(8'd128),
    .din9(8'd144),
    .din10(8'd136),
    .din11(8'd131),
    .din12(8'd198),
    .din13(8'd198),
    .din14(8'd134),
    .din15(8'd142),
    .def(8'd255),
    .sel(agg_result_i2_fu_836_p34),
    .dout(agg_result_i2_fu_836_p35)
);

simple_calculator_sparsemux_9_4_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h1 ),
    .din0_WIDTH( 8 ),
    .CASE1( 4'h2 ),
    .din1_WIDTH( 8 ),
    .CASE2( 4'h4 ),
    .din2_WIDTH( 8 ),
    .CASE3( 4'h8 ),
    .din3_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sparsemux_9_4_8_1_1_U9(
    .din0(agg_result_i_fu_684_p35),
    .din1(agg_result_i1_fu_760_p35),
    .din2(agg_result_i2_fu_836_p35),
    .din3(8'd255),
    .def(8'd255),
    .sel(select_digit),
    .dout(segment_data_local_fu_908_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((hex_dec_read_read_fu_190_p2 == 1'd1)) begin
            d0_3_reg_217 <= zext_ln31_fu_628_p1;
        end else if ((hex_dec_read_read_fu_190_p2 == 1'd0)) begin
            d0_3_reg_217 <= d0_1_fu_534_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((hex_dec_read_read_fu_190_p2 == 1'd1)) begin
            d1_2_reg_226 <= zext_ln31_1_fu_641_p1;
        end else if ((hex_dec_read_read_fu_190_p2 == 1'd0)) begin
            d1_2_reg_226 <= d1_fu_581_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((hex_dec_read_read_fu_190_p2 == 1'd1)) begin
                        d2_2_reg_235[1] <= 1'b0;
            d2_2_reg_235[2] <= 1'b0;
            d2_2_reg_235[3] <= 1'b0;
            d2_2_reg_235[4] <= 1'b0;
            d2_2_reg_235[5] <= 1'b0;
            d2_2_reg_235[6] <= 1'b0;
        end else if ((hex_dec_read_read_fu_190_p2 == 1'd0)) begin
                        d2_2_reg_235[6 : 1] <= d2_fu_619_p2[6 : 1];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_969 <= r_1_fu_463_p3;
        tmp_2_reg_977 <= {{mul_ln41_fu_473_p2[12:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ref_tmp11_i_reg_989 <= ref_tmp11_i_div10_fu_251_ap_return;
        ref_tmp19_i_reg_995 <= ref_tmp19_i_div10_fu_256_ap_return;
        ref_tmp5_i_reg_983 <= ref_tmp5_i_div10_fu_246_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        result_14_reg_947 <= result_14_fu_442_p3;
        tmp_1_reg_953 <= result_14_fu_442_p3[32'd5];
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((hex_dec_read_read_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_i1_fu_760_p34 = $signed(d1_2_reg_226);

assign agg_result_i2_fu_836_p34 = $signed(d2_2_reg_235);

assign agg_result_i_fu_684_p34 = $signed(d0_3_reg_217);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign d0_1_fu_534_p2 = (sub_ln40_1_fu_528_p2 + zext_ln40_fu_493_p1);

assign d0_fu_625_p1 = r_1_reg_969[3:0];

assign d1_fu_581_p2 = (sub_ln43_2_fu_575_p2 + zext_ln43_fu_540_p1);

assign d2_fu_619_p2 = ($signed(sext_ln46_fu_604_p1) - $signed(zext_ln46_1_fu_615_p1));

assign hex_dec_read_read_fu_190_p2 = hex_dec;

assign icmp_ln12_1_fu_352_p2 = ((code == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_366_p2 = ((code == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_380_p2 = ((code == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln12_4_fu_394_p2 = ((code == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln12_5_fu_408_p2 = ((code == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln12_6_fu_422_p2 = ((code == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln12_7_fu_436_p2 = ((code == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_338_p2 = ((code == 4'd7) ? 1'b1 : 1'b0);

assign leds = {{{{{code}, {hex_dec}}, {1'd0}}, {tmp_5_fu_669_p4}}, {tmp_5_fu_669_p5}};

assign mul_ln41_fu_473_p0 = mul_ln41_fu_473_p00;

assign mul_ln41_fu_473_p00 = r_1_fu_463_p3;

assign mul_ln41_fu_473_p1 = 13'd103;

assign r_1_fu_463_p3 = ((tmp_1_reg_953[0:0] == 1'b1) ? r_fu_458_p2 : result_14_reg_947);

assign r_fu_458_p2 = (6'd0 - result_14_reg_947);

assign ref_tmp11_i_div10_fu_251_r_val = tmp_2_reg_977;

assign result_10_fu_386_p3 = ((icmp_ln12_3_fu_380_p2[0:0] == 1'b1) ? sext_ln10_2_fu_308_p1 : result_9_fu_372_p3);

assign result_11_fu_400_p3 = ((icmp_ln12_4_fu_394_p2[0:0] == 1'b1) ? sext_ln10_1_fu_298_p1 : result_10_fu_386_p3);

assign result_12_fu_414_p3 = ((icmp_ln12_5_fu_408_p2[0:0] == 1'b1) ? sext_ln10_fu_288_p1 : result_11_fu_400_p3);

assign result_13_fu_428_p3 = ((icmp_ln12_6_fu_422_p2[0:0] == 1'b1) ? result_1_fu_276_p2 : result_12_fu_414_p3);

assign result_14_fu_442_p3 = ((icmp_ln12_7_fu_436_p2[0:0] == 1'b1) ? result_fu_270_p2 : result_13_fu_428_p3);

assign result_1_fu_276_p2 = ($signed(sext_ln47_fu_262_p1) - $signed(sext_ln47_1_fu_266_p1));

assign result_2_fu_282_p0 = b;

assign result_2_fu_282_p1 = a;

assign result_2_fu_282_p2 = (result_2_fu_282_p1 & result_2_fu_282_p0);

assign result_3_fu_292_p0 = b;

assign result_3_fu_292_p1 = a;

assign result_3_fu_292_p2 = (result_3_fu_292_p1 | result_3_fu_292_p0);

assign result_4_fu_302_p2 = (result_2_fu_282_p2 ^ 5'd31);

assign result_5_fu_312_p0 = b;

assign result_5_fu_312_p1 = a;

assign result_5_fu_312_p2 = (result_5_fu_312_p1 ^ result_5_fu_312_p0);

assign result_6_fu_322_p0 = a;

assign result_6_fu_322_p2 = (result_6_fu_322_p0 ^ 5'd31);

assign result_7_fu_344_p3 = ((icmp_ln12_fu_338_p2[0:0] == 1'b1) ? sub_ln43_fu_332_p2 : result_fu_270_p2);

assign result_8_fu_358_p3 = ((icmp_ln12_1_fu_352_p2[0:0] == 1'b1) ? sext_ln10_4_fu_328_p1 : result_7_fu_344_p3);

assign result_9_fu_372_p3 = ((icmp_ln12_2_fu_366_p2[0:0] == 1'b1) ? sext_ln10_3_fu_318_p1 : result_8_fu_358_p3);

assign result_fu_270_p2 = ($signed(sext_ln47_1_fu_266_p1) + $signed(sext_ln47_fu_262_p1));

assign segment_data = segment_data_local_fu_908_p11;

assign segment_enable = segment_enable_local_fu_645_p11;

assign sext_ln10_1_fu_298_p1 = $signed(result_3_fu_292_p2);

assign sext_ln10_2_fu_308_p1 = $signed(result_4_fu_302_p2);

assign sext_ln10_3_fu_318_p1 = $signed(result_5_fu_312_p2);

assign sext_ln10_4_fu_328_p1 = $signed(result_6_fu_322_p2);

assign sext_ln10_fu_288_p1 = result_2_fu_282_p2;

assign sext_ln40_fu_513_p1 = $signed(sub_ln40_fu_507_p2);

assign sext_ln43_fu_560_p1 = $signed(sub_ln43_1_fu_554_p2);

assign sext_ln46_fu_604_p1 = $signed(sub_ln46_fu_598_p2);

assign sext_ln47_1_fu_266_p0 = b;

assign sext_ln47_1_fu_266_p1 = sext_ln47_1_fu_266_p0;

assign sext_ln47_fu_262_p0 = a;

assign sext_ln47_fu_262_p1 = sext_ln47_fu_262_p0;

assign shl_ln1_fu_543_p3 = {{ref_tmp11_i_reg_989}, {3'd0}};

assign shl_ln2_fu_587_p3 = {{ref_tmp19_i_reg_995}, {3'd0}};

assign shl_ln40_1_fu_517_p3 = {{ref_tmp5_i_reg_983}, {1'd0}};

assign shl_ln43_1_fu_564_p3 = {{ref_tmp11_i_reg_989}, {1'd0}};

assign shl_ln46_1_fu_608_p3 = {{ref_tmp19_i_reg_995}, {1'd0}};

assign shl_ln_fu_496_p3 = {{ref_tmp5_i_reg_983}, {3'd0}};

assign sub_ln40_1_fu_528_p2 = ($signed(sext_ln40_fu_513_p1) - $signed(zext_ln40_2_fu_524_p1));

assign sub_ln40_fu_507_p2 = (6'd0 - zext_ln40_1_fu_503_p1);

assign sub_ln43_1_fu_554_p2 = (6'd0 - zext_ln43_1_fu_550_p1);

assign sub_ln43_2_fu_575_p2 = ($signed(sext_ln43_fu_560_p1) - $signed(zext_ln43_2_fu_571_p1));

assign sub_ln43_fu_332_p2 = ($signed(6'd0) - $signed(sext_ln47_fu_262_p1));

assign sub_ln46_fu_598_p2 = (6'd0 - zext_ln46_fu_594_p1);

assign tmp_5_fu_669_p4 = b;

assign tmp_5_fu_669_p5 = a;

assign tmp_fu_632_p4 = {{r_1_reg_969[5:4]}};

assign zext_ln31_1_fu_641_p1 = tmp_fu_632_p4;

assign zext_ln31_fu_628_p1 = d0_fu_625_p1;

assign zext_ln40_1_fu_503_p1 = shl_ln_fu_496_p3;

assign zext_ln40_2_fu_524_p1 = shl_ln40_1_fu_517_p3;

assign zext_ln40_fu_493_p1 = r_1_reg_969;

assign zext_ln43_1_fu_550_p1 = shl_ln1_fu_543_p3;

assign zext_ln43_2_fu_571_p1 = shl_ln43_1_fu_564_p3;

assign zext_ln43_fu_540_p1 = tmp_2_reg_977;

assign zext_ln46_1_fu_615_p1 = shl_ln46_1_fu_608_p3;

assign zext_ln46_fu_594_p1 = shl_ln2_fu_587_p3;

always @ (posedge ap_clk) begin
    d2_2_reg_235[0] <= 1'b0;
end

endmodule //simple_calculator
