-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity one_digit_seven_segment is
port (
    digit : IN STD_LOGIC_VECTOR (7 downto 0);
    code7segment : OUT STD_LOGIC_VECTOR (7 downto 0);
    anodes : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of one_digit_seven_segment is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "one_digit_seven_segment_one_digit_seven_segment,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.922625,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=49,HLS_VERSION=2023_2}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_92 : STD_LOGIC_VECTOR (7 downto 0) := "10010010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_99 : STD_LOGIC_VECTOR (7 downto 0) := "10011001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal digit_read_read_fu_72_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    anodes <= ap_const_lv8_FE;

    code7segment_assign_proc : process(digit_read_read_fu_72_p2)
    begin
        if ((not((digit_read_read_fu_72_p2 = ap_const_lv8_0)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_1)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_2)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_3)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_4)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_5)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_6)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_7)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_8)) and not((digit_read_read_fu_72_p2 = ap_const_lv8_9)))) then 
            code7segment <= ap_const_lv8_FF;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_0)) then 
            code7segment <= ap_const_lv8_C0;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_1)) then 
            code7segment <= ap_const_lv8_F9;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_2)) then 
            code7segment <= ap_const_lv8_A4;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_3)) then 
            code7segment <= ap_const_lv8_B0;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_4)) then 
            code7segment <= ap_const_lv8_99;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_5)) then 
            code7segment <= ap_const_lv8_92;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_6)) then 
            code7segment <= ap_const_lv8_82;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_7)) then 
            code7segment <= ap_const_lv8_F8;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_8)) then 
            code7segment <= ap_const_lv8_80;
        elsif ((digit_read_read_fu_72_p2 = ap_const_lv8_9)) then 
            code7segment <= ap_const_lv8_90;
        else 
            code7segment <= "XXXXXXXX";
        end if; 
    end process;

    digit_read_read_fu_72_p2 <= digit;
end behav;
