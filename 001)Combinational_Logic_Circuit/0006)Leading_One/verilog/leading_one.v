// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="leading_one_leading_one,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.097000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=101,HLS_VERSION=2023_2}" *)

module leading_one (
        degisken,
        ap_return
);


input  [8:0] degisken;
output  [4:0] ap_return;

wire   [0:0] tmp_3_fu_98_p3;
wire   [0:0] tmp_4_fu_112_p3;
wire   [0:0] tmp_5_fu_126_p3;
wire   [0:0] tmp_6_fu_140_p3;
wire   [0:0] empty_fu_78_p1;
wire   [0:0] code_fu_154_p2;
wire   [1:0] tmp_fu_168_p4;
wire   [8:0] and_ln_fu_178_p3;
wire   [0:0] icmp_ln15_fu_186_p2;
wire   [0:0] tmp_1_fu_82_p3;
wire   [0:0] or_ln15_fu_200_p2;
wire   [3:0] select_ln15_fu_192_p3;
wire   [0:0] tmp_2_fu_90_p3;
wire   [0:0] or_ln15_1_fu_214_p2;
wire   [0:0] xor_ln15_fu_220_p2;
wire   [0:0] xor_ln19_fu_106_p2;
wire   [0:0] and_ln19_1_fu_232_p2;
wire   [0:0] and_ln23_fu_238_p2;
wire   [0:0] and_ln19_fu_226_p2;
wire   [0:0] or_ln23_fu_252_p2;
wire   [3:0] select_ln23_fu_244_p3;
wire   [3:0] select_ln15_1_fu_206_p3;
wire   [0:0] xor_ln23_fu_120_p2;
wire   [0:0] and_ln23_1_fu_266_p2;
wire   [0:0] xor_ln27_fu_134_p2;
wire   [0:0] and_ln27_1_fu_278_p2;
wire   [0:0] and_ln31_fu_284_p2;
wire   [0:0] and_ln27_fu_272_p2;
wire   [0:0] or_ln31_fu_298_p2;
wire   [3:0] select_ln31_fu_290_p3;
wire   [3:0] select_ln23_1_fu_258_p3;
wire   [3:0] select_ln31_1_fu_304_p3;
wire   [0:0] xor_ln31_fu_148_p2;
wire   [1:0] tmp_7_fu_322_p4;
wire   [0:0] icmp_ln39_fu_332_p2;
wire   [0:0] and_ln31_1_fu_316_p2;
wire   [0:0] and_ln39_fu_338_p2;
wire   [4:0] select_ln9_fu_160_p3;
wire   [4:0] zext_ln31_fu_312_p1;
wire   [0:0] tmp_8_fu_352_p3;
wire   [0:0] and_ln35_fu_360_p2;
wire   [4:0] select_ln39_fu_344_p3;
wire    ap_ce_reg;

assign and_ln19_1_fu_232_p2 = (xor_ln19_fu_106_p2 & xor_ln15_fu_220_p2);

assign and_ln19_fu_226_p2 = (xor_ln15_fu_220_p2 & tmp_3_fu_98_p3);

assign and_ln23_1_fu_266_p2 = (xor_ln23_fu_120_p2 & and_ln19_1_fu_232_p2);

assign and_ln23_fu_238_p2 = (tmp_4_fu_112_p3 & and_ln19_1_fu_232_p2);

assign and_ln27_1_fu_278_p2 = (xor_ln27_fu_134_p2 & and_ln23_1_fu_266_p2);

assign and_ln27_fu_272_p2 = (tmp_5_fu_126_p3 & and_ln23_1_fu_266_p2);

assign and_ln31_1_fu_316_p2 = (xor_ln31_fu_148_p2 & and_ln27_1_fu_278_p2);

assign and_ln31_fu_284_p2 = (tmp_6_fu_140_p3 & and_ln27_1_fu_278_p2);

assign and_ln35_fu_360_p2 = (tmp_8_fu_352_p3 & and_ln31_1_fu_316_p2);

assign and_ln39_fu_338_p2 = (icmp_ln39_fu_332_p2 & and_ln31_1_fu_316_p2);

assign and_ln_fu_178_p3 = {{tmp_fu_168_p4}, {7'd0}};

assign code_fu_154_p2 = (empty_fu_78_p1 ^ 1'd1);

assign empty_fu_78_p1 = degisken[0:0];

assign icmp_ln15_fu_186_p2 = ((and_ln_fu_178_p3 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_332_p2 = ((tmp_7_fu_322_p4 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln15_1_fu_214_p2 = (tmp_2_fu_90_p3 | tmp_1_fu_82_p3);

assign or_ln15_fu_200_p2 = (tmp_1_fu_82_p3 | icmp_ln15_fu_186_p2);

assign or_ln23_fu_252_p2 = (and_ln23_fu_238_p2 | and_ln19_fu_226_p2);

assign or_ln31_fu_298_p2 = (and_ln31_fu_284_p2 | and_ln27_fu_272_p2);

assign select_ln15_1_fu_206_p3 = ((or_ln15_fu_200_p2[0:0] == 1'b1) ? select_ln15_fu_192_p3 : 4'd1);

assign select_ln15_fu_192_p3 = ((icmp_ln15_fu_186_p2[0:0] == 1'b1) ? 4'd7 : 4'd8);

assign select_ln23_1_fu_258_p3 = ((or_ln23_fu_252_p2[0:0] == 1'b1) ? select_ln23_fu_244_p3 : select_ln15_1_fu_206_p3);

assign select_ln23_fu_244_p3 = ((and_ln23_fu_238_p2[0:0] == 1'b1) ? 4'd5 : 4'd6);

assign select_ln31_1_fu_304_p3 = ((or_ln31_fu_298_p2[0:0] == 1'b1) ? select_ln31_fu_290_p3 : select_ln23_1_fu_258_p3);

assign select_ln31_fu_290_p3 = ((and_ln31_fu_284_p2[0:0] == 1'b1) ? 4'd3 : 4'd4);

assign select_ln39_fu_344_p3 = ((and_ln39_fu_338_p2[0:0] == 1'b1) ? select_ln9_fu_160_p3 : zext_ln31_fu_312_p1);

assign select_ln9_fu_160_p3 = ((code_fu_154_p2[0:0] == 1'b1) ? 5'd31 : 5'd0);

assign tmp_1_fu_82_p3 = degisken[32'd8];

assign tmp_2_fu_90_p3 = degisken[32'd7];

assign tmp_3_fu_98_p3 = degisken[32'd6];

assign tmp_4_fu_112_p3 = degisken[32'd5];

assign tmp_5_fu_126_p3 = degisken[32'd4];

assign tmp_6_fu_140_p3 = degisken[32'd3];

assign tmp_7_fu_322_p4 = {{degisken[2:1]}};

assign tmp_8_fu_352_p3 = degisken[32'd2];

assign tmp_fu_168_p4 = {{degisken[8:7]}};

assign xor_ln15_fu_220_p2 = (or_ln15_1_fu_214_p2 ^ 1'd1);

assign xor_ln19_fu_106_p2 = (tmp_3_fu_98_p3 ^ 1'd1);

assign xor_ln23_fu_120_p2 = (tmp_4_fu_112_p3 ^ 1'd1);

assign xor_ln27_fu_134_p2 = (tmp_5_fu_126_p3 ^ 1'd1);

assign xor_ln31_fu_148_p2 = (tmp_6_fu_140_p3 ^ 1'd1);

assign zext_ln31_fu_312_p1 = select_ln31_1_fu_304_p3;

assign ap_return = ((and_ln35_fu_360_p2[0:0] == 1'b1) ? 5'd2 : select_ln39_fu_344_p3);

endmodule //leading_one
