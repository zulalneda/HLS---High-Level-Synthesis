-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity traffic_controller_system is
port (
    l_sensor : IN STD_LOGIC_VECTOR (0 downto 0);
    r_sensor : IN STD_LOGIC_VECTOR (0 downto 0);
    u_sensor : IN STD_LOGIC_VECTOR (0 downto 0);
    d_sensor : IN STD_LOGIC_VECTOR (0 downto 0);
    EW : OUT STD_LOGIC_VECTOR (0 downto 0);
    NS : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of traffic_controller_system is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "traffic_controller_system_traffic_controller_system,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.956000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=38,HLS_VERSION=2023_2}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal or_ln28_1_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln16_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_1_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_1_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_1_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_1_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ew_rule_3_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_2_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln51_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_1_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ns_rule_2_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);


begin



    EW <= (or_ln51_fu_164_p2 or or_ln51_2_fu_170_p2);
    NS <= (ns_rule_2_fu_158_p2 or ns_rule_1_fu_134_p2);
    and_ln16_1_fu_128_p2 <= (xor_ln16_fu_122_p2 and r_sensor);
    and_ln16_fu_116_p2 <= (l_sensor and d_sensor);
    ew_rule_1_fu_74_p2 <= (u_sensor and l_sensor);
    ew_rule_3_fu_110_p2 <= (or_ln28_2_fu_104_p2 xor ap_const_lv1_1);
    ns_rule_1_fu_134_p2 <= (u_sensor and and_ln16_1_fu_128_p2);
    ns_rule_2_fu_158_p2 <= (xor_ln22_fu_140_p2 and xor_ln22_1_fu_152_p2);
    or_ln22_fu_146_p2 <= (u_sensor or l_sensor);
    or_ln28_1_fu_98_p2 <= (u_sensor or d_sensor);
    or_ln28_2_fu_104_p2 <= (or_ln28_fu_92_p2 or or_ln28_1_fu_98_p2);
    or_ln28_fu_92_p2 <= (r_sensor or l_sensor);
    or_ln51_2_fu_170_p2 <= (ew_rule_3_fu_110_p2 or ew_rule_1_fu_74_p2);
    or_ln51_fu_164_p2 <= (xor_ln10_fu_80_p2 or xor_ln10_1_fu_86_p2);
    xor_ln10_1_fu_86_p2 <= (u_sensor xor d_sensor);
    xor_ln10_fu_80_p2 <= (r_sensor xor l_sensor);
    xor_ln16_fu_122_p2 <= (ap_const_lv1_1 xor and_ln16_fu_116_p2);
    xor_ln22_1_fu_152_p2 <= (or_ln22_fu_146_p2 xor ap_const_lv1_1);
    xor_ln22_fu_140_p2 <= (r_sensor xor d_sensor);
end behav;
