// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="home_alarm_system_home_alarm_system,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.792500,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=245,HLS_VERSION=2023_2}" *)

module home_alarm_system (
        ap_clk,
        ap_rst,
        switches,
        buttons,
        leds,
        segment_data,
        segment_enable
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [15:0] switches;
input  [4:0] buttons;
output  [15:0] leds;
output  [7:0] segment_data;
output  [3:0] segment_enable;

reg[7:0] segment_data;

wire   [0:0] icmp_ln26_fu_194_p2;
reg   [0:0] icmp_ln26_reg_532;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] or_ln28_fu_212_p2;
reg   [0:0] or_ln28_reg_536;
wire   [2:0] select_ln39_1_fu_519_p3;
reg   [2:0] select_ln39_1_reg_540;
reg   [2:0] ap_phi_mux_storemerge1_phi_fu_132_p6;
reg   [2:0] storemerge1_reg_128;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln39_fu_486_p3;
wire   [3:0] switch_code_fu_184_p4;
wire   [2:0] window_sensors_fu_154_p1;
wire   [1:0] motion_detectors_fu_166_p4;
wire   [0:0] icmp_ln28_fu_200_p2;
wire   [0:0] icmp_ln28_1_fu_206_p2;
wire   [0:0] trunc_ln4_2_fu_150_p1;
wire   [0:0] trunc_ln19_2_fu_162_p1;
wire   [1:0] trunc_ln4_1_fu_146_p1;
wire   [1:0] trunc_ln19_1_fu_158_p1;
wire   [1:0] and_ln18_fu_236_p2;
wire   [2:0] trunc_ln4_fu_142_p1;
wire   [2:0] and_ln23_fu_250_p2;
wire   [0:0] tmp_2_fu_256_p3;
wire   [0:0] icmp_ln65_fu_224_p2;
wire   [0:0] or_ln65_fu_280_p2;
wire   [7:0] select_ln65_fu_272_p3;
wire   [0:0] and_ln13_fu_230_p2;
wire   [0:0] xor_ln65_fu_294_p2;
wire   [0:0] or_ln13_fu_306_p2;
wire   [0:0] tmp_1_fu_242_p3;
wire   [0:0] xor_ln13_fu_312_p2;
wire   [0:0] and_ln18_1_fu_318_p2;
wire   [0:0] and_ln13_1_fu_300_p2;
wire   [0:0] or_ln18_fu_332_p2;
wire   [7:0] select_ln18_fu_324_p3;
wire   [7:0] select_ln65_1_fu_286_p3;
wire   [0:0] or_ln18_1_fu_346_p2;
wire   [0:0] and_ln18_2_fu_352_p2;
wire   [0:0] or_ln18_2_fu_366_p2;
wire   [1:0] select_ln18_2_fu_358_p3;
wire   [1:0] select_ln23_fu_264_p3;
wire   [1:0] select_ln18_3_fu_372_p3;
wire   [0:0] tmp_4_fu_398_p3;
wire   [0:0] tmp_5_fu_406_p3;
wire   [0:0] icmp_ln63_fu_218_p2;
wire   [0:0] and_ln44_fu_414_p2;
wire   [0:0] or_ln63_fu_428_p2;
wire   [7:0] select_ln63_fu_420_p3;
wire   [0:0] icmp_ln69_fu_384_p2;
wire   [0:0] xor_ln63_fu_442_p2;
wire   [0:0] and_ln69_fu_448_p2;
wire   [7:0] select_ln18_1_fu_338_p3;
wire   [7:0] select_ln63_1_fu_434_p3;
wire   [0:0] or_ln69_fu_462_p2;
wire   [0:0] tmp_fu_176_p3;
wire   [0:0] xor_ln69_fu_468_p2;
wire   [0:0] and_ln39_fu_474_p2;
wire   [0:0] tmp_3_fu_390_p3;
wire   [0:0] and_ln39_1_fu_480_p2;
wire   [7:0] select_ln69_fu_454_p3;
wire   [2:0] select_ln63_2_fu_495_p3;
wire  signed [2:0] sext_ln69_fu_380_p1;
wire   [2:0] select_ln63_3_fu_503_p3;
wire   [2:0] select_ln69_1_fu_511_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln28_reg_536 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln26_reg_532 == 1'd1))) begin
        storemerge1_reg_128 <= select_ln39_1_reg_540;
    end else if ((((or_ln28_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln26_fu_194_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (icmp_ln26_fu_194_p2 == 1'd0)))) begin
        storemerge1_reg_128 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln26_reg_532 <= icmp_ln26_fu_194_p2;
        or_ln28_reg_536 <= or_ln28_fu_212_p2;
        select_ln39_1_reg_540 <= select_ln39_1_fu_519_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((or_ln28_reg_536 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln26_reg_532 == 1'd1))) begin
        ap_phi_mux_storemerge1_phi_fu_132_p6 = select_ln39_1_reg_540;
    end else begin
        ap_phi_mux_storemerge1_phi_fu_132_p6 = storemerge1_reg_128;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((or_ln28_fu_212_p2 == 1'd1) & (icmp_ln26_fu_194_p2 == 1'd1))) begin
            segment_data = select_ln39_fu_486_p3;
        end else if (((or_ln28_fu_212_p2 == 1'd0) & (icmp_ln26_fu_194_p2 == 1'd1))) begin
            segment_data = 8'd136;
        end else if ((icmp_ln26_fu_194_p2 == 1'd0)) begin
            segment_data = 8'd192;
        end else begin
            segment_data = 'bx;
        end
    end else begin
        segment_data = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln13_1_fu_300_p2 = (xor_ln65_fu_294_p2 & and_ln13_fu_230_p2);

assign and_ln13_fu_230_p2 = (trunc_ln4_2_fu_150_p1 & trunc_ln19_2_fu_162_p1);

assign and_ln18_1_fu_318_p2 = (xor_ln13_fu_312_p2 & tmp_1_fu_242_p3);

assign and_ln18_2_fu_352_p2 = (xor_ln65_fu_294_p2 & or_ln18_1_fu_346_p2);

assign and_ln18_fu_236_p2 = (trunc_ln4_1_fu_146_p1 & trunc_ln19_1_fu_158_p1);

assign and_ln23_fu_250_p2 = (window_sensors_fu_154_p1 & trunc_ln4_fu_142_p1);

assign and_ln39_1_fu_480_p2 = (tmp_3_fu_390_p3 & and_ln39_fu_474_p2);

assign and_ln39_fu_474_p2 = (xor_ln69_fu_468_p2 & tmp_fu_176_p3);

assign and_ln44_fu_414_p2 = (tmp_5_fu_406_p3 & tmp_4_fu_398_p3);

assign and_ln69_fu_448_p2 = (xor_ln63_fu_442_p2 & icmp_ln69_fu_384_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln26_fu_194_p2 = ((switch_code_fu_184_p4 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_206_p2 = ((motion_detectors_fu_166_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_200_p2 = ((window_sensors_fu_154_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_218_p2 = ((buttons == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_224_p2 = ((window_sensors_fu_154_p1 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_384_p2 = ((motion_detectors_fu_166_p4 == 2'd0) ? 1'b1 : 1'b0);

assign leds = switches;

assign motion_detectors_fu_166_p4 = {{switches[7:6]}};

assign or_ln13_fu_306_p2 = (icmp_ln65_fu_224_p2 | and_ln13_fu_230_p2);

assign or_ln18_1_fu_346_p2 = (tmp_1_fu_242_p3 | and_ln13_fu_230_p2);

assign or_ln18_2_fu_366_p2 = (icmp_ln65_fu_224_p2 | and_ln18_2_fu_352_p2);

assign or_ln18_fu_332_p2 = (and_ln18_1_fu_318_p2 | and_ln13_1_fu_300_p2);

assign or_ln28_fu_212_p2 = (icmp_ln28_fu_200_p2 | icmp_ln28_1_fu_206_p2);

assign or_ln63_fu_428_p2 = (icmp_ln63_fu_218_p2 | and_ln44_fu_414_p2);

assign or_ln65_fu_280_p2 = (tmp_2_fu_256_p3 | icmp_ln65_fu_224_p2);

assign or_ln69_fu_462_p2 = (icmp_ln69_fu_384_p2 | icmp_ln63_fu_218_p2);

assign segment_enable = $signed(ap_phi_mux_storemerge1_phi_fu_132_p6);

assign select_ln18_1_fu_338_p3 = ((or_ln18_fu_332_p2[0:0] == 1'b1) ? select_ln18_fu_324_p3 : select_ln65_1_fu_286_p3);

assign select_ln18_2_fu_358_p3 = ((and_ln18_2_fu_352_p2[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign select_ln18_3_fu_372_p3 = ((or_ln18_2_fu_366_p2[0:0] == 1'b1) ? select_ln18_2_fu_358_p3 : select_ln23_fu_264_p3);

assign select_ln18_fu_324_p3 = ((and_ln18_1_fu_318_p2[0:0] == 1'b1) ? 8'd164 : 8'd249);

assign select_ln23_fu_264_p3 = ((tmp_2_fu_256_p3[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign select_ln39_1_fu_519_p3 = ((and_ln39_1_fu_480_p2[0:0] == 1'b1) ? 3'd5 : select_ln69_1_fu_511_p3);

assign select_ln39_fu_486_p3 = ((and_ln39_1_fu_480_p2[0:0] == 1'b1) ? 8'd249 : select_ln69_fu_454_p3);

assign select_ln63_1_fu_434_p3 = ((or_ln63_fu_428_p2[0:0] == 1'b1) ? select_ln63_fu_420_p3 : 8'd134);

assign select_ln63_2_fu_495_p3 = ((icmp_ln63_fu_218_p2[0:0] == 1'b1) ? 3'd0 : 3'd5);

assign select_ln63_3_fu_503_p3 = ((or_ln63_fu_428_p2[0:0] == 1'b1) ? select_ln63_2_fu_495_p3 : 3'd0);

assign select_ln63_fu_420_p3 = ((icmp_ln63_fu_218_p2[0:0] == 1'b1) ? 8'd134 : 8'd164);

assign select_ln65_1_fu_286_p3 = ((or_ln65_fu_280_p2[0:0] == 1'b1) ? select_ln65_fu_272_p3 : 8'd134);

assign select_ln65_fu_272_p3 = ((icmp_ln65_fu_224_p2[0:0] == 1'b1) ? 8'd134 : 8'd176);

assign select_ln69_1_fu_511_p3 = ((and_ln69_fu_448_p2[0:0] == 1'b1) ? sext_ln69_fu_380_p1 : select_ln63_3_fu_503_p3);

assign select_ln69_fu_454_p3 = ((and_ln69_fu_448_p2[0:0] == 1'b1) ? select_ln18_1_fu_338_p3 : select_ln63_1_fu_434_p3);

assign sext_ln69_fu_380_p1 = $signed(select_ln18_3_fu_372_p3);

assign switch_code_fu_184_p4 = {{switches[15:12]}};

assign tmp_1_fu_242_p3 = and_ln18_fu_236_p2[32'd1];

assign tmp_2_fu_256_p3 = and_ln23_fu_250_p2[32'd2];

assign tmp_3_fu_390_p3 = buttons[32'd3];

assign tmp_4_fu_398_p3 = buttons[32'd4];

assign tmp_5_fu_406_p3 = switches[32'd7];

assign tmp_fu_176_p3 = switches[32'd6];

assign trunc_ln19_1_fu_158_p1 = switches[1:0];

assign trunc_ln19_2_fu_162_p1 = switches[0:0];

assign trunc_ln4_1_fu_146_p1 = buttons[1:0];

assign trunc_ln4_2_fu_150_p1 = buttons[0:0];

assign trunc_ln4_fu_142_p1 = buttons[2:0];

assign window_sensors_fu_154_p1 = switches[2:0];

assign xor_ln13_fu_312_p2 = (or_ln13_fu_306_p2 ^ 1'd1);

assign xor_ln63_fu_442_p2 = (icmp_ln63_fu_218_p2 ^ 1'd1);

assign xor_ln65_fu_294_p2 = (icmp_ln65_fu_224_p2 ^ 1'd1);

assign xor_ln69_fu_468_p2 = (or_ln69_fu_462_p2 ^ 1'd1);

endmodule //home_alarm_system
