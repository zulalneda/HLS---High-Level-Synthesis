// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1240,HLS_SYN_LUT=422,HLS_VERSION=2023_2}" *)

module fir (
        ap_clk,
        ap_rst,
        y,
        x
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
output  [31:0] y;
input  [31:0] x;

reg   [31:0] fir_int_int_shift_reg_9;
reg   [31:0] fir_int_int_shift_reg_8;
reg   [31:0] fir_int_int_shift_reg_7;
reg   [31:0] fir_int_int_shift_reg_6;
reg   [31:0] fir_int_int_shift_reg_5;
reg   [31:0] fir_int_int_shift_reg_4;
reg   [31:0] fir_int_int_shift_reg_3;
reg   [31:0] fir_int_int_shift_reg_2;
reg   [31:0] fir_int_int_shift_reg_1;
reg   [31:0] fir_int_int_shift_reg;
reg  signed [31:0] fir_int_int_shift_reg_4_load_reg_222;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] tmp_fu_125_p2;
reg  signed [31:0] tmp_reg_227;
wire  signed [31:0] tmp2_fu_131_p2;
reg  signed [31:0] tmp2_reg_232;
wire  signed [31:0] tmp4_fu_137_p2;
reg  signed [31:0] tmp4_reg_237;
wire   [31:0] grp_fu_69_p2;
reg   [31:0] mul_ln33_reg_242;
wire   [31:0] grp_fu_74_p2;
reg   [31:0] tmp1_reg_247;
wire   [31:0] grp_fu_84_p2;
reg   [31:0] tmp3_reg_252;
wire   [31:0] grp_fu_79_p2;
reg   [31:0] tmp5_reg_257;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [9:0] grp_fu_69_p1;
wire   [9:0] grp_fu_74_p1;
wire   [6:0] grp_fu_79_p1;
wire  signed [7:0] grp_fu_84_p1;
wire   [31:0] add_ln27_1_fu_211_p2;
wire   [31:0] add_ln27_fu_207_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 fir_int_int_shift_reg_9 = 32'd0;
#0 fir_int_int_shift_reg_8 = 32'd0;
#0 fir_int_int_shift_reg_7 = 32'd0;
#0 fir_int_int_shift_reg_6 = 32'd0;
#0 fir_int_int_shift_reg_5 = 32'd0;
#0 fir_int_int_shift_reg_4 = 32'd0;
#0 fir_int_int_shift_reg_3 = 32'd0;
#0 fir_int_int_shift_reg_2 = 32'd0;
#0 fir_int_int_shift_reg_1 = 32'd0;
#0 fir_int_int_shift_reg = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

fir_mul_32s_10ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
mul_32s_10ns_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_int_int_shift_reg_4_load_reg_222),
    .din1(grp_fu_69_p1),
    .ce(1'b1),
    .dout(grp_fu_69_p2)
);

fir_mul_32s_10ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
mul_32s_10ns_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_227),
    .din1(grp_fu_74_p1),
    .ce(1'b1),
    .dout(grp_fu_74_p2)
);

fir_mul_32s_7ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mul_32s_7ns_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp4_reg_237),
    .din1(grp_fu_79_p1),
    .ce(1'b1),
    .dout(grp_fu_79_p2)
);

fir_mul_32s_8s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
mul_32s_8s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_232),
    .din1(grp_fu_84_p1),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_int_int_shift_reg <= x;
        fir_int_int_shift_reg_1 <= fir_int_int_shift_reg;
        fir_int_int_shift_reg_2 <= fir_int_int_shift_reg_1;
        fir_int_int_shift_reg_3 <= fir_int_int_shift_reg_2;
        fir_int_int_shift_reg_4 <= fir_int_int_shift_reg_3;
        fir_int_int_shift_reg_5 <= fir_int_int_shift_reg_4;
        fir_int_int_shift_reg_6 <= fir_int_int_shift_reg_5;
        fir_int_int_shift_reg_7 <= fir_int_int_shift_reg_6;
        fir_int_int_shift_reg_8 <= fir_int_int_shift_reg_7;
        fir_int_int_shift_reg_9 <= fir_int_int_shift_reg_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_int_int_shift_reg_4_load_reg_222 <= fir_int_int_shift_reg_4;
        tmp2_reg_232 <= tmp2_fu_131_p2;
        tmp4_reg_237 <= tmp4_fu_137_p2;
        tmp_reg_227 <= tmp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul_ln33_reg_242 <= grp_fu_69_p2;
        tmp1_reg_247 <= grp_fu_74_p2;
        tmp3_reg_252 <= grp_fu_84_p2;
        tmp5_reg_257 <= grp_fu_79_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_211_p2 = (tmp1_reg_247 + tmp3_reg_252);

assign add_ln27_fu_207_p2 = (mul_ln33_reg_242 + tmp5_reg_257);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_69_p1 = 32'd500;

assign grp_fu_74_p1 = 32'd313;

assign grp_fu_79_p1 = 32'd53;

assign grp_fu_84_p1 = 32'd4294967205;

assign tmp2_fu_131_p2 = (fir_int_int_shift_reg_1 + fir_int_int_shift_reg_7);

assign tmp4_fu_137_p2 = (fir_int_int_shift_reg_9 + x);

assign tmp_fu_125_p2 = (fir_int_int_shift_reg_3 + fir_int_int_shift_reg_5);

assign y = (add_ln27_1_fu_211_p2 + add_ln27_fu_207_p2);

endmodule //fir
