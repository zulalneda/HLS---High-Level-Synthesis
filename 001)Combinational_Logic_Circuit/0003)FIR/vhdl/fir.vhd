-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1240,HLS_SYN_LUT=422,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110100";
    constant ap_const_lv32_139 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_FFFFFFA5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110100101";

    signal fir_int_int_shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_int_int_shift_reg_4_load_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_69_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln33_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_74_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_79_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_69_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_74_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_79_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_84_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_mul_32s_10ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_7ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_8s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_10ns_32_2_1_U1 : component fir_mul_32s_10ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_int_int_shift_reg_4_load_reg_222,
        din1 => grp_fu_69_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_69_p2);

    mul_32s_10ns_32_2_1_U2 : component fir_mul_32s_10ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_227,
        din1 => grp_fu_74_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_74_p2);

    mul_32s_7ns_32_2_1_U3 : component fir_mul_32s_7ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp4_reg_237,
        din1 => grp_fu_79_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_79_p2);

    mul_32s_8s_32_2_1_U4 : component fir_mul_32s_8s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp2_reg_232,
        din1 => grp_fu_84_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_84_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_int_int_shift_reg <= x;
                fir_int_int_shift_reg_1 <= fir_int_int_shift_reg;
                fir_int_int_shift_reg_2 <= fir_int_int_shift_reg_1;
                fir_int_int_shift_reg_3 <= fir_int_int_shift_reg_2;
                fir_int_int_shift_reg_4 <= fir_int_int_shift_reg_3;
                fir_int_int_shift_reg_5 <= fir_int_int_shift_reg_4;
                fir_int_int_shift_reg_6 <= fir_int_int_shift_reg_5;
                fir_int_int_shift_reg_7 <= fir_int_int_shift_reg_6;
                fir_int_int_shift_reg_8 <= fir_int_int_shift_reg_7;
                fir_int_int_shift_reg_9 <= fir_int_int_shift_reg_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_int_int_shift_reg_4_load_reg_222 <= fir_int_int_shift_reg_4;
                tmp2_reg_232 <= tmp2_fu_131_p2;
                tmp4_reg_237 <= tmp4_fu_137_p2;
                tmp_reg_227 <= tmp_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                mul_ln33_reg_242 <= grp_fu_69_p2;
                tmp1_reg_247 <= grp_fu_74_p2;
                tmp3_reg_252 <= grp_fu_84_p2;
                tmp5_reg_257 <= grp_fu_79_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln27_1_fu_211_p2 <= std_logic_vector(unsigned(tmp1_reg_247) + unsigned(tmp3_reg_252));
    add_ln27_fu_207_p2 <= std_logic_vector(unsigned(mul_ln33_reg_242) + unsigned(tmp5_reg_257));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;
    grp_fu_69_p1 <= ap_const_lv32_1F4(10 - 1 downto 0);
    grp_fu_74_p1 <= ap_const_lv32_139(10 - 1 downto 0);
    grp_fu_79_p1 <= ap_const_lv32_35(7 - 1 downto 0);
    grp_fu_84_p1 <= ap_const_lv32_FFFFFFA5(8 - 1 downto 0);
    tmp2_fu_131_p2 <= std_logic_vector(unsigned(fir_int_int_shift_reg_1) + unsigned(fir_int_int_shift_reg_7));
    tmp4_fu_137_p2 <= std_logic_vector(unsigned(fir_int_int_shift_reg_9) + unsigned(x));
    tmp_fu_125_p2 <= std_logic_vector(unsigned(fir_int_int_shift_reg_3) + unsigned(fir_int_int_shift_reg_5));
    y <= std_logic_vector(unsigned(add_ln27_1_fu_211_p2) + unsigned(add_ln27_fu_207_p2));
end behav;
