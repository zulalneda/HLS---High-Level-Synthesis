// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uart_receiver_uart_receiver,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.344429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=142,HLS_VERSION=2023_2}" *)

module uart_receiver (
        ap_clk,
        ap_rst,
        uart_rx,
        baud_rate_signal,
        data,
        valid_data
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] uart_rx;
input  [0:0] baud_rate_signal;
output  [7:0] data;
output  [0:0] valid_data;

reg   [0:0] state;
reg   [7:0] d;
reg   [31:0] bit_counter;
reg   [7:0] ap_phi_mux_d_loc_0_phi_fu_77_p8;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] next_state_1_load_fu_137_p1;
wire   [0:0] baud_rate_signal_read_read_fu_48_p2;
wire   [0:0] icmp_ln48_fu_166_p2;
reg   [7:0] tmp_fu_172_p4;
reg   [0:0] ap_phi_mux_next_state_2_phi_fu_91_p8;
wire   [0:0] and_ln26_fu_154_p2;
reg   [31:0] ap_phi_mux_next_bit_counter_1_phi_fu_107_p8;
wire   [31:0] next_bit_counter_fu_189_p2;
reg   [0:0] ap_phi_mux_valid_data_local_phi_fu_122_p8;
wire   [0:0] next_state_fu_148_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 1'd0;
#0 d = 8'd0;
#0 bit_counter = 32'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bit_counter <= ap_phi_mux_next_bit_counter_1_phi_fu_107_p8;
        state <= ap_phi_mux_next_state_2_phi_fu_91_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_166_p2 == 1'd0) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        d <= tmp_fu_172_p4;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln48_fu_166_p2 == 1'd0) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_d_loc_0_phi_fu_77_p8 = tmp_fu_172_p4;
    end else if ((((next_state_1_load_fu_137_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((baud_rate_signal_read_read_fu_48_p2 == 1'd0) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln48_fu_166_p2 == 1'd1) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_d_loc_0_phi_fu_77_p8 = d;
    end else begin
        ap_phi_mux_d_loc_0_phi_fu_77_p8 = 'bx;
    end
end

always @ (*) begin
    if (((baud_rate_signal_read_read_fu_48_p2 == 1'd0) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 = bit_counter;
    end else if (((icmp_ln48_fu_166_p2 == 1'd0) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 = next_bit_counter_fu_189_p2;
    end else if ((((next_state_1_load_fu_137_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln48_fu_166_p2 == 1'd1) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 = 32'd0;
    end else begin
        ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 = 'bx;
    end
end

always @ (*) begin
    if (((next_state_1_load_fu_137_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_2_phi_fu_91_p8 = and_ln26_fu_154_p2;
    end else if ((((baud_rate_signal_read_read_fu_48_p2 == 1'd0) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln48_fu_166_p2 == 1'd0) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_next_state_2_phi_fu_91_p8 = 1'd1;
    end else if (((icmp_ln48_fu_166_p2 == 1'd1) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_2_phi_fu_91_p8 = 1'd0;
    end else begin
        ap_phi_mux_next_state_2_phi_fu_91_p8 = 'bx;
    end
end

always @ (*) begin
    if ((((next_state_1_load_fu_137_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((baud_rate_signal_read_read_fu_48_p2 == 1'd0) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln48_fu_166_p2 == 1'd0) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_valid_data_local_phi_fu_122_p8 = 1'd0;
    end else if (((icmp_ln48_fu_166_p2 == 1'd1) & (baud_rate_signal_read_read_fu_48_p2 == 1'd1) & (next_state_1_load_fu_137_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_valid_data_local_phi_fu_122_p8 = uart_rx;
    end else begin
        ap_phi_mux_valid_data_local_phi_fu_122_p8 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln26_fu_154_p2 = (next_state_fu_148_p2 & baud_rate_signal);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign baud_rate_signal_read_read_fu_48_p2 = baud_rate_signal;

assign data = ap_phi_mux_d_loc_0_phi_fu_77_p8;

assign icmp_ln48_fu_166_p2 = ((bit_counter == 32'd8) ? 1'b1 : 1'b0);

assign next_bit_counter_fu_189_p2 = (bit_counter + 32'd1);

assign next_state_1_load_fu_137_p1 = state;

assign next_state_fu_148_p2 = (uart_rx ^ 1'd1);

always @ (*) begin
    tmp_fu_172_p4 = d;
    tmp_fu_172_p4[bit_counter] = |(uart_rx);
end

assign valid_data = ap_phi_mux_valid_data_local_phi_fu_122_p8;

endmodule //uart_receiver
