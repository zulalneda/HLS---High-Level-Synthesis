-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity uart_receiver is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    uart_rx : IN STD_LOGIC_VECTOR (0 downto 0);
    baud_rate_signal : IN STD_LOGIC_VECTOR (0 downto 0);
    data : OUT STD_LOGIC_VECTOR (7 downto 0);
    valid_data : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of uart_receiver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "uart_receiver_uart_receiver,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.344429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=142,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal d : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal bit_counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_phi_mux_d_loc_0_phi_fu_77_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_state_1_load_fu_137_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal baud_rate_signal_read_read_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_next_state_2_phi_fu_91_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_bit_counter_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_valid_data_local_phi_fu_122_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bit_counter <= ap_phi_mux_next_bit_counter_1_phi_fu_107_p8;
                state <= ap_phi_mux_next_state_2_phi_fu_91_p8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_166_p2 = ap_const_lv1_0) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                d <= tmp_fu_172_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln26_fu_154_p2 <= (next_state_fu_148_p2 and baud_rate_signal);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_phi_mux_d_loc_0_phi_fu_77_p8_assign_proc : process(d, ap_CS_fsm_state1, next_state_1_load_fu_137_p1, baud_rate_signal_read_read_fu_48_p2, icmp_ln48_fu_166_p2, tmp_fu_172_p4)
    begin
        if (((icmp_ln48_fu_166_p2 = ap_const_lv1_0) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_d_loc_0_phi_fu_77_p8 <= tmp_fu_172_p4;
        elsif ((((next_state_1_load_fu_137_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_0) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln48_fu_166_p2 = ap_const_lv1_1) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_d_loc_0_phi_fu_77_p8 <= d;
        else 
            ap_phi_mux_d_loc_0_phi_fu_77_p8 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_next_bit_counter_1_phi_fu_107_p8_assign_proc : process(bit_counter, ap_CS_fsm_state1, next_state_1_load_fu_137_p1, baud_rate_signal_read_read_fu_48_p2, icmp_ln48_fu_166_p2, next_bit_counter_fu_189_p2)
    begin
        if (((baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_0) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 <= bit_counter;
        elsif (((icmp_ln48_fu_166_p2 = ap_const_lv1_0) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 <= next_bit_counter_fu_189_p2;
        elsif ((((next_state_1_load_fu_137_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln48_fu_166_p2 = ap_const_lv1_1) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 <= ap_const_lv32_0;
        else 
            ap_phi_mux_next_bit_counter_1_phi_fu_107_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_next_state_2_phi_fu_91_p8_assign_proc : process(ap_CS_fsm_state1, next_state_1_load_fu_137_p1, baud_rate_signal_read_read_fu_48_p2, icmp_ln48_fu_166_p2, and_ln26_fu_154_p2)
    begin
        if (((next_state_1_load_fu_137_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_2_phi_fu_91_p8 <= and_ln26_fu_154_p2;
        elsif ((((baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_0) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln48_fu_166_p2 = ap_const_lv1_0) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_next_state_2_phi_fu_91_p8 <= ap_const_lv1_1;
        elsif (((icmp_ln48_fu_166_p2 = ap_const_lv1_1) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_2_phi_fu_91_p8 <= ap_const_lv1_0;
        else 
            ap_phi_mux_next_state_2_phi_fu_91_p8 <= "X";
        end if; 
    end process;


    ap_phi_mux_valid_data_local_phi_fu_122_p8_assign_proc : process(uart_rx, ap_CS_fsm_state1, next_state_1_load_fu_137_p1, baud_rate_signal_read_read_fu_48_p2, icmp_ln48_fu_166_p2)
    begin
        if ((((next_state_1_load_fu_137_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_0) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln48_fu_166_p2 = ap_const_lv1_0) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_valid_data_local_phi_fu_122_p8 <= ap_const_lv1_0;
        elsif (((icmp_ln48_fu_166_p2 = ap_const_lv1_1) and (baud_rate_signal_read_read_fu_48_p2 = ap_const_lv1_1) and (next_state_1_load_fu_137_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_valid_data_local_phi_fu_122_p8 <= uart_rx;
        else 
            ap_phi_mux_valid_data_local_phi_fu_122_p8 <= "X";
        end if; 
    end process;

    baud_rate_signal_read_read_fu_48_p2 <= baud_rate_signal;
    data <= ap_phi_mux_d_loc_0_phi_fu_77_p8;
    icmp_ln48_fu_166_p2 <= "1" when (bit_counter = ap_const_lv32_8) else "0";
    next_bit_counter_fu_189_p2 <= std_logic_vector(unsigned(bit_counter) + unsigned(ap_const_lv32_1));
    next_state_1_load_fu_137_p1 <= state;
    next_state_fu_148_p2 <= (uart_rx xor ap_const_lv1_1);
    
    tmp_fu_172_p4_proc : process(d, bit_counter, uart_rx)
    begin
        tmp_fu_172_p4 <= d;
        if to_integer(unsigned(bit_counter)) >= d'low and to_integer(unsigned(bit_counter)) <= d'high then
            tmp_fu_172_p4(to_integer(unsigned(bit_counter))) <= uart_rx(0);
        end if;
    end process;

    valid_data <= ap_phi_mux_valid_data_local_phi_fu_122_p8;
end behav;
