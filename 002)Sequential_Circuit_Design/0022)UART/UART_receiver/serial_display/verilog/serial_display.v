// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="serial_display_serial_display,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.447000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=25,HLS_SYN_LUT=89,HLS_VERSION=2023_2}" *)

module serial_display (
        ap_clk,
        ap_rst,
        ascii,
        data_valid,
        seven_segment_data,
        seven_segment_enable
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [7:0] ascii;
input  [0:0] data_valid;
output  [7:0] seven_segment_data;
output  [3:0] seven_segment_enable;

reg   [7:0] ascii_local;
wire   [4:0] seven_segment_code_address0;
reg    seven_segment_code_ce0;
wire   [7:0] seven_segment_code_q0;
wire   [4:0] data_index_2_fu_153_p3;
reg   [4:0] data_index_2_reg_168;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln19_fu_161_p1;
wire    ap_block_pp0_stage0;
wire   [0:0] data_valid_read_read_fu_56_p2;
wire    ap_block_pp0_stage0_01001;
wire   [7:0] data_index_fu_111_p2;
wire   [7:0] add_ln10_fu_127_p2;
wire   [4:0] trunc_ln3_fu_107_p1;
wire   [0:0] icmp_ln10_fu_133_p2;
wire   [4:0] data_index_1_fu_139_p2;
wire   [0:0] icmp_ln6_fu_121_p2;
wire   [4:0] trunc_ln5_fu_117_p1;
wire   [4:0] select_ln10_fu_145_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ascii_local = 8'd71;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

serial_display_seven_segment_code_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 17 ),
    .AddressWidth( 5 ))
seven_segment_code_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(seven_segment_code_address0),
    .ce0(seven_segment_code_ce0),
    .q0(seven_segment_code_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_valid_read_read_fu_56_p2 == 1'd1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ascii_local <= ascii;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_index_2_reg_168 <= data_index_2_fu_153_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        seven_segment_code_ce0 = 1'b1;
    end else begin
        seven_segment_code_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_127_p2 = ($signed(ascii_local) + $signed(8'd191));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_index_1_fu_139_p2 = (trunc_ln3_fu_107_p1 + 5'd9);

assign data_index_2_fu_153_p3 = ((icmp_ln6_fu_121_p2[0:0] == 1'b1) ? trunc_ln5_fu_117_p1 : select_ln10_fu_145_p3);

assign data_index_fu_111_p2 = ($signed(ascii_local) + $signed(8'd208));

assign data_valid_read_read_fu_56_p2 = data_valid;

assign icmp_ln10_fu_133_p2 = ((add_ln10_fu_127_p2 < 8'd6) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_121_p2 = ((data_index_fu_111_p2 < 8'd9) ? 1'b1 : 1'b0);

assign select_ln10_fu_145_p3 = ((icmp_ln10_fu_133_p2[0:0] == 1'b1) ? data_index_1_fu_139_p2 : 5'd16);

assign seven_segment_code_address0 = zext_ln19_fu_161_p1;

assign seven_segment_data = seven_segment_code_q0;

assign seven_segment_enable = 4'd14;

assign trunc_ln3_fu_107_p1 = ascii_local[4:0];

assign trunc_ln5_fu_117_p1 = data_index_fu_111_p2[4:0];

assign zext_ln19_fu_161_p1 = data_index_2_reg_168;

endmodule //serial_display
