-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity serial_display is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ascii : IN STD_LOGIC_VECTOR (7 downto 0);
    data_valid : IN STD_LOGIC_VECTOR (0 downto 0);
    seven_segment_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    seven_segment_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of serial_display is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "serial_display_serial_display,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.447000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=25,HLS_SYN_LUT=89,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_D0 : STD_LOGIC_VECTOR (7 downto 0) := "11010000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";

    signal ascii_local : STD_LOGIC_VECTOR (7 downto 0) := "01000111";
    signal seven_segment_code_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal seven_segment_code_ce0 : STD_LOGIC;
    signal seven_segment_code_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_index_2_fu_153_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_index_2_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln19_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_valid_read_read_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal data_index_fu_111_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln10_fu_127_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_107_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln10_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_index_1_fu_139_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln6_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_fu_117_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_fu_145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component serial_display_seven_segment_code_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    seven_segment_code_U : component serial_display_seven_segment_code_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 17,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seven_segment_code_address0,
        ce0 => seven_segment_code_ce0,
        q0 => seven_segment_code_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_valid_read_read_fu_56_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ascii_local <= ascii;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_index_2_reg_168 <= data_index_2_fu_153_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_127_p2 <= std_logic_vector(unsigned(ascii_local) + unsigned(ap_const_lv8_BF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;
    data_index_1_fu_139_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_107_p1) + unsigned(ap_const_lv5_9));
    data_index_2_fu_153_p3 <= 
        trunc_ln5_fu_117_p1 when (icmp_ln6_fu_121_p2(0) = '1') else 
        select_ln10_fu_145_p3;
    data_index_fu_111_p2 <= std_logic_vector(unsigned(ascii_local) + unsigned(ap_const_lv8_D0));
    data_valid_read_read_fu_56_p2 <= data_valid;
    icmp_ln10_fu_133_p2 <= "1" when (unsigned(add_ln10_fu_127_p2) < unsigned(ap_const_lv8_6)) else "0";
    icmp_ln6_fu_121_p2 <= "1" when (unsigned(data_index_fu_111_p2) < unsigned(ap_const_lv8_9)) else "0";
    select_ln10_fu_145_p3 <= 
        data_index_1_fu_139_p2 when (icmp_ln10_fu_133_p2(0) = '1') else 
        ap_const_lv5_10;
    seven_segment_code_address0 <= zext_ln19_fu_161_p1(5 - 1 downto 0);

    seven_segment_code_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            seven_segment_code_ce0 <= ap_const_logic_1;
        else 
            seven_segment_code_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    seven_segment_data <= seven_segment_code_q0;
    seven_segment_enable <= ap_const_lv4_E;
    trunc_ln3_fu_107_p1 <= ascii_local(5 - 1 downto 0);
    trunc_ln5_fu_117_p1 <= data_index_fu_111_p2(5 - 1 downto 0);
    zext_ln19_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_index_2_reg_168),64));
end behav;
