-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity state_machine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (3 downto 0);
    enter : IN STD_LOGIC_VECTOR (0 downto 0);
    door_open : OUT STD_LOGIC_VECTOR (0 downto 0);
    lock : IN STD_LOGIC_VECTOR (0 downto 0);
    seven_segment_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    seven_segment_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of state_machine is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "state_machine_state_machine,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.677000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=201,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_99 : STD_LOGIC_VECTOR (7 downto 0) := "10011001";

    signal state : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal icmp_ln71_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln71_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_1_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_8_fu_302_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_8_reg_407 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_9_fu_345_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal code_fu_362_p13 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_state_1_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_2_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln133_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_3_fu_186_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_fu_128_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln50_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_172_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_4_fu_206_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln71_2_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_2_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln114_fu_158_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_5_fu_226_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln71_3_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_3_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln67_fu_148_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_6_fu_246_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln50_5_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_4_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_292_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_state_7_fu_266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln71_4_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal door_open_local_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_7_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_6_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_331_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal code_fu_362_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal code_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_fu_362_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_fu_362_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_fu_362_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component state_machine_sparsemux_11_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (31 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (31 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (31 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (31 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (31 downto 0);
        din4_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sparsemux_11_32_8_1_1_U1 : component state_machine_sparsemux_11_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000000000000000000000000000000",
        din0_WIDTH => 8,
        CASE1 => "00000000000000000000000000000001",
        din1_WIDTH => 8,
        CASE2 => "00000000000000000000000000000010",
        din2_WIDTH => 8,
        CASE3 => "00000000000000000000000000000011",
        din3_WIDTH => 8,
        CASE4 => "00000000000000000000000000000100",
        din4_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_C0,
        din1 => ap_const_lv8_F9,
        din2 => ap_const_lv8_A4,
        din3 => ap_const_lv8_B0,
        din4 => ap_const_lv8_99,
        def => ap_const_lv8_C0,
        sel => code_fu_362_p12,
        dout => code_fu_362_p13);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln71_1_reg_396 <= icmp_ln71_1_fu_214_p2;
                icmp_ln71_reg_391 <= icmp_ln71_fu_194_p2;
                next_state_8_reg_407 <= next_state_8_fu_302_p3;
                xor_ln50_reg_401 <= xor_ln50_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                state <= next_state_9_fu_345_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln50_1_fu_220_p2 <= (icmp_ln71_1_fu_214_p2 and enter);
    and_ln50_2_fu_240_p2 <= (icmp_ln71_2_fu_234_p2 and enter);
    and_ln50_3_fu_260_p2 <= (icmp_ln71_3_fu_254_p2 and enter);
    and_ln50_4_fu_280_p2 <= (xor_ln50_fu_274_p2 and icmp_ln71_3_fu_254_p2);
    and_ln50_5_fu_286_p2 <= (xor_ln50_fu_274_p2 and icmp_ln71_2_fu_234_p2);
    and_ln50_6_fu_323_p2 <= (xor_ln50_reg_401 and icmp_ln71_1_reg_396);
    and_ln50_7_fu_327_p2 <= (xor_ln50_reg_401 and icmp_ln71_reg_391);
    and_ln50_fu_200_p2 <= (icmp_ln71_fu_194_p2 and enter);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    code_fu_362_p12 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_state_9_fu_345_p3),32));
    door_open <= (icmp_ln71_4_fu_310_p2 and door_open_local_fu_136_p2);
    door_open_local_fu_136_p2 <= (lock xor ap_const_lv1_1);
    icmp_ln133_fu_180_p2 <= "1" when (x = ap_const_lv4_6) else "0";
    icmp_ln71_1_fu_214_p2 <= "1" when (state = ap_const_lv3_2) else "0";
    icmp_ln71_2_fu_234_p2 <= "1" when (state = ap_const_lv3_1) else "0";
    icmp_ln71_3_fu_254_p2 <= "1" when (state = ap_const_lv3_0) else "0";
    icmp_ln71_4_fu_310_p2 <= "1" when (state = ap_const_lv3_4) else "0";
    icmp_ln71_fu_194_p2 <= "1" when (state = ap_const_lv3_3) else "0";
    icmp_ln95_fu_152_p2 <= "1" when (x = ap_const_lv4_3) else "0";
    next_state_1_fu_142_p2 <= "1" when (x = ap_const_lv4_2) else "0";
    next_state_2_fu_166_p2 <= "1" when (x = ap_const_lv4_4) else "0";
    next_state_3_fu_186_p3 <= 
        ap_const_lv3_4 when (icmp_ln133_fu_180_p2(0) = '1') else 
        ap_const_lv3_0;
    next_state_4_fu_206_p3 <= 
        next_state_3_fu_186_p3 when (and_ln50_fu_200_p2(0) = '1') else 
        next_state_fu_128_p3;
    next_state_5_fu_226_p3 <= 
        select_ln67_fu_172_p3 when (and_ln50_1_fu_220_p2(0) = '1') else 
        next_state_4_fu_206_p3;
    next_state_6_fu_246_p3 <= 
        select_ln114_fu_158_p3 when (and_ln50_2_fu_240_p2(0) = '1') else 
        next_state_5_fu_226_p3;
    next_state_7_fu_266_p3 <= 
        zext_ln67_fu_148_p1 when (and_ln50_3_fu_260_p2(0) = '1') else 
        next_state_6_fu_246_p3;
    next_state_8_fu_302_p3 <= 
        zext_ln50_fu_292_p1 when (or_ln50_fu_296_p2(0) = '1') else 
        next_state_7_fu_266_p3;
    next_state_9_fu_345_p3 <= 
        select_ln50_fu_331_p3 when (or_ln50_1_fu_339_p2(0) = '1') else 
        next_state_8_reg_407;
    next_state_fu_128_p3 <= 
        ap_const_lv3_0 when (lock(0) = '1') else 
        ap_const_lv3_4;
    or_ln50_1_fu_339_p2 <= (and_ln50_7_fu_327_p2 or and_ln50_6_fu_323_p2);
    or_ln50_fu_296_p2 <= (and_ln50_5_fu_286_p2 or and_ln50_4_fu_280_p2);
    select_ln114_fu_158_p3 <= 
        ap_const_lv3_2 when (icmp_ln95_fu_152_p2(0) = '1') else 
        ap_const_lv3_0;
    select_ln50_fu_331_p3 <= 
        ap_const_lv3_3 when (and_ln50_7_fu_327_p2(0) = '1') else 
        ap_const_lv3_2;
    select_ln67_fu_172_p3 <= 
        ap_const_lv3_3 when (next_state_2_fu_166_p2(0) = '1') else 
        ap_const_lv3_0;
    seven_segment_data <= code_fu_362_p13;
    seven_segment_enable <= ap_const_lv4_E;
    xor_ln50_fu_274_p2 <= (enter xor ap_const_lv1_1);
    zext_ln50_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln50_5_fu_286_p2),3));
    zext_ln67_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_state_1_fu_142_p2),3));
end behav;
