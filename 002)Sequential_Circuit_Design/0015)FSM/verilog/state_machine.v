// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="state_machine_state_machine,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.677000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=201,HLS_VERSION=2023_2}" *)

module state_machine (
        ap_clk,
        ap_rst,
        x,
        enter,
        door_open,
        lock,
        seven_segment_data,
        seven_segment_enable
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [3:0] x;
input  [0:0] enter;
output  [0:0] door_open;
input  [0:0] lock;
output  [7:0] seven_segment_data;
output  [3:0] seven_segment_enable;

reg   [2:0] state;
wire   [0:0] icmp_ln71_fu_194_p2;
reg   [0:0] icmp_ln71_reg_391;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln71_1_fu_214_p2;
reg   [0:0] icmp_ln71_1_reg_396;
wire   [0:0] xor_ln50_fu_274_p2;
reg   [0:0] xor_ln50_reg_401;
wire   [2:0] next_state_8_fu_302_p3;
reg   [2:0] next_state_8_reg_407;
wire   [2:0] next_state_9_fu_345_p3;
wire    ap_CS_fsm_state2;
wire   [7:0] code_fu_362_p13;
wire   [0:0] next_state_1_fu_142_p2;
wire   [0:0] icmp_ln95_fu_152_p2;
wire   [0:0] next_state_2_fu_166_p2;
wire   [0:0] icmp_ln133_fu_180_p2;
wire   [0:0] and_ln50_fu_200_p2;
wire   [2:0] next_state_3_fu_186_p3;
wire   [2:0] next_state_fu_128_p3;
wire   [0:0] and_ln50_1_fu_220_p2;
wire   [2:0] select_ln67_fu_172_p3;
wire   [2:0] next_state_4_fu_206_p3;
wire   [0:0] icmp_ln71_2_fu_234_p2;
wire   [0:0] and_ln50_2_fu_240_p2;
wire   [2:0] select_ln114_fu_158_p3;
wire   [2:0] next_state_5_fu_226_p3;
wire   [0:0] icmp_ln71_3_fu_254_p2;
wire   [0:0] and_ln50_3_fu_260_p2;
wire   [2:0] zext_ln67_fu_148_p1;
wire   [2:0] next_state_6_fu_246_p3;
wire   [0:0] and_ln50_5_fu_286_p2;
wire   [0:0] and_ln50_4_fu_280_p2;
wire   [0:0] or_ln50_fu_296_p2;
wire   [2:0] zext_ln50_fu_292_p1;
wire   [2:0] next_state_7_fu_266_p3;
wire   [0:0] icmp_ln71_4_fu_310_p2;
wire   [0:0] door_open_local_fu_136_p2;
wire   [0:0] and_ln50_7_fu_327_p2;
wire   [0:0] and_ln50_6_fu_323_p2;
wire   [0:0] or_ln50_1_fu_339_p2;
wire   [2:0] select_ln50_fu_331_p3;
wire   [31:0] code_fu_362_p12;
reg   [1:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire   [31:0] code_fu_362_p1;
wire   [31:0] code_fu_362_p3;
wire   [31:0] code_fu_362_p5;
wire   [31:0] code_fu_362_p7;
wire   [31:0] code_fu_362_p9;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 3'd0;
#0 ap_CS_fsm = 2'd1;
end

state_machine_sparsemux_11_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 32'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 32'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 32'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 32'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 32'h4 ),
    .din4_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
sparsemux_11_32_8_1_1_U1(
    .din0(8'd192),
    .din1(8'd249),
    .din2(8'd164),
    .din3(8'd176),
    .din4(8'd153),
    .def(8'd192),
    .sel(code_fu_362_p12),
    .dout(code_fu_362_p13)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln71_1_reg_396 <= icmp_ln71_1_fu_214_p2;
        icmp_ln71_reg_391 <= icmp_ln71_fu_194_p2;
        next_state_8_reg_407 <= next_state_8_fu_302_p3;
        xor_ln50_reg_401 <= xor_ln50_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state <= next_state_9_fu_345_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln50_1_fu_220_p2 = (icmp_ln71_1_fu_214_p2 & enter);

assign and_ln50_2_fu_240_p2 = (icmp_ln71_2_fu_234_p2 & enter);

assign and_ln50_3_fu_260_p2 = (icmp_ln71_3_fu_254_p2 & enter);

assign and_ln50_4_fu_280_p2 = (xor_ln50_fu_274_p2 & icmp_ln71_3_fu_254_p2);

assign and_ln50_5_fu_286_p2 = (xor_ln50_fu_274_p2 & icmp_ln71_2_fu_234_p2);

assign and_ln50_6_fu_323_p2 = (xor_ln50_reg_401 & icmp_ln71_1_reg_396);

assign and_ln50_7_fu_327_p2 = (xor_ln50_reg_401 & icmp_ln71_reg_391);

assign and_ln50_fu_200_p2 = (icmp_ln71_fu_194_p2 & enter);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign code_fu_362_p12 = next_state_9_fu_345_p3;

assign door_open = (icmp_ln71_4_fu_310_p2 & door_open_local_fu_136_p2);

assign door_open_local_fu_136_p2 = (lock ^ 1'd1);

assign icmp_ln133_fu_180_p2 = ((x == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_214_p2 = ((state == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln71_2_fu_234_p2 = ((state == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln71_3_fu_254_p2 = ((state == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln71_4_fu_310_p2 = ((state == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_194_p2 = ((state == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_152_p2 = ((x == 4'd3) ? 1'b1 : 1'b0);

assign next_state_1_fu_142_p2 = ((x == 4'd2) ? 1'b1 : 1'b0);

assign next_state_2_fu_166_p2 = ((x == 4'd4) ? 1'b1 : 1'b0);

assign next_state_3_fu_186_p3 = ((icmp_ln133_fu_180_p2[0:0] == 1'b1) ? 3'd4 : 3'd0);

assign next_state_4_fu_206_p3 = ((and_ln50_fu_200_p2[0:0] == 1'b1) ? next_state_3_fu_186_p3 : next_state_fu_128_p3);

assign next_state_5_fu_226_p3 = ((and_ln50_1_fu_220_p2[0:0] == 1'b1) ? select_ln67_fu_172_p3 : next_state_4_fu_206_p3);

assign next_state_6_fu_246_p3 = ((and_ln50_2_fu_240_p2[0:0] == 1'b1) ? select_ln114_fu_158_p3 : next_state_5_fu_226_p3);

assign next_state_7_fu_266_p3 = ((and_ln50_3_fu_260_p2[0:0] == 1'b1) ? zext_ln67_fu_148_p1 : next_state_6_fu_246_p3);

assign next_state_8_fu_302_p3 = ((or_ln50_fu_296_p2[0:0] == 1'b1) ? zext_ln50_fu_292_p1 : next_state_7_fu_266_p3);

assign next_state_9_fu_345_p3 = ((or_ln50_1_fu_339_p2[0:0] == 1'b1) ? select_ln50_fu_331_p3 : next_state_8_reg_407);

assign next_state_fu_128_p3 = ((lock[0:0] == 1'b1) ? 3'd0 : 3'd4);

assign or_ln50_1_fu_339_p2 = (and_ln50_7_fu_327_p2 | and_ln50_6_fu_323_p2);

assign or_ln50_fu_296_p2 = (and_ln50_5_fu_286_p2 | and_ln50_4_fu_280_p2);

assign select_ln114_fu_158_p3 = ((icmp_ln95_fu_152_p2[0:0] == 1'b1) ? 3'd2 : 3'd0);

assign select_ln50_fu_331_p3 = ((and_ln50_7_fu_327_p2[0:0] == 1'b1) ? 3'd3 : 3'd2);

assign select_ln67_fu_172_p3 = ((next_state_2_fu_166_p2[0:0] == 1'b1) ? 3'd3 : 3'd0);

assign seven_segment_data = code_fu_362_p13;

assign seven_segment_enable = 4'd14;

assign xor_ln50_fu_274_p2 = (enter ^ 1'd1);

assign zext_ln50_fu_292_p1 = and_ln50_5_fu_286_p2;

assign zext_ln67_fu_148_p1 = next_state_1_fu_142_p2;

endmodule //state_machine
