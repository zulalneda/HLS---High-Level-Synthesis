-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity serial2parallel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    serial_start : IN STD_LOGIC_VECTOR (0 downto 0);
    end_conversion : OUT STD_LOGIC_VECTOR (0 downto 0);
    data : IN STD_LOGIC_VECTOR (0 downto 0);
    a : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of serial2parallel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "serial2parallel_serial2parallel,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.140429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=49,HLS_SYN_LUT=213,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal state_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal counter : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    signal a_reg_out : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal next_state_4_fu_168_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_next_state_2_phi_fu_85_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln29_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_6_fu_153_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln36_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_1_fu_122_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_counter_3_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_next_counter_2_phi_fu_96_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_counter_1_fu_132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_a_reg_out_load : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_105_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_147_p2 = ap_const_lv1_1) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                a_reg_out <= next_state_6_fu_153_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                counter <= ap_phi_mux_next_counter_2_phi_fu_96_p6;
                state_reg <= ap_phi_mux_next_state_2_phi_fu_85_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a <= ap_sig_allocacmp_a_reg_out_load;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_phi_mux_next_counter_2_phi_fu_96_p6_assign_proc : process(ap_CS_fsm_state1, icmp_ln29_fu_141_p2, icmp_ln36_fu_147_p2, next_counter_3_fu_177_p2, next_counter_1_fu_132_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((icmp_ln36_fu_147_p2 = ap_const_lv1_0) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_next_counter_2_phi_fu_96_p6 <= next_counter_1_fu_132_p3;
            elsif (((icmp_ln36_fu_147_p2 = ap_const_lv1_1) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_next_counter_2_phi_fu_96_p6 <= ap_const_lv32_8;
            elsif ((icmp_ln29_fu_141_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_next_counter_2_phi_fu_96_p6 <= next_counter_3_fu_177_p2;
            else 
                ap_phi_mux_next_counter_2_phi_fu_96_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_next_counter_2_phi_fu_96_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_next_state_2_phi_fu_85_p6_assign_proc : process(next_state_4_fu_168_p3, ap_CS_fsm_state1, icmp_ln29_fu_141_p2, next_state_6_fu_153_p3, icmp_ln36_fu_147_p2, next_state_1_fu_122_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((icmp_ln36_fu_147_p2 = ap_const_lv1_0) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_next_state_2_phi_fu_85_p6 <= next_state_1_fu_122_p3;
            elsif (((icmp_ln36_fu_147_p2 = ap_const_lv1_1) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_next_state_2_phi_fu_85_p6 <= next_state_6_fu_153_p3;
            elsif ((icmp_ln29_fu_141_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_next_state_2_phi_fu_85_p6 <= next_state_4_fu_168_p3;
            else 
                ap_phi_mux_next_state_2_phi_fu_85_p6 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_next_state_2_phi_fu_85_p6 <= "XXXXXXXX";
        end if; 
    end process;


    ap_sig_allocacmp_a_reg_out_load_assign_proc : process(a_reg_out, ap_CS_fsm_state1, icmp_ln29_fu_141_p2, next_state_6_fu_153_p3, icmp_ln36_fu_147_p2)
    begin
        if (((icmp_ln36_fu_147_p2 = ap_const_lv1_1) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_a_reg_out_load <= next_state_6_fu_153_p3;
        else 
            ap_sig_allocacmp_a_reg_out_load <= a_reg_out;
        end if; 
    end process;


    end_conversion_assign_proc : process(ap_CS_fsm_state1, icmp_ln29_fu_141_p2, icmp_ln36_fu_147_p2)
    begin
        if (((icmp_ln36_fu_147_p2 = ap_const_lv1_1) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            end_conversion <= ap_const_lv1_1;
        elsif ((((icmp_ln36_fu_147_p2 = ap_const_lv1_0) and (icmp_ln29_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln29_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            end_conversion <= ap_const_lv1_0;
        else 
            end_conversion <= "X";
        end if; 
    end process;

    grp_fu_105_p4 <= next_state_1_fu_122_p3(7 downto 1);
    icmp_ln29_fu_141_p2 <= "1" when (unsigned(next_counter_1_fu_132_p3) < unsigned(ap_const_lv32_7)) else "0";
    icmp_ln36_fu_147_p2 <= "1" when (next_counter_1_fu_132_p3 = ap_const_lv32_7) else "0";
    next_counter_1_fu_132_p3 <= 
        ap_const_lv32_0 when (serial_start(0) = '1') else 
        counter;
    next_counter_3_fu_177_p2 <= std_logic_vector(unsigned(next_counter_1_fu_132_p3) + unsigned(ap_const_lv32_1));
    next_state_1_fu_122_p3 <= 
        ap_const_lv8_0 when (serial_start(0) = '1') else 
        state_reg;
    next_state_4_fu_168_p3 <= (data & grp_fu_105_p4);
    next_state_6_fu_153_p3 <= (data & grp_fu_105_p4);
end behav;
