// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="serial2parallel_serial2parallel,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.140429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=49,HLS_SYN_LUT=213,HLS_VERSION=2023_2}" *)

module serial2parallel (
        ap_clk,
        ap_rst,
        serial_start,
        end_conversion,
        data,
        a
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] serial_start;
output  [0:0] end_conversion;
input  [0:0] data;
output  [7:0] a;

reg[0:0] end_conversion;

reg   [7:0] state_reg;
reg   [31:0] counter;
reg   [7:0] a_reg_out;
wire   [7:0] next_state_4_fu_168_p3;
reg   [7:0] ap_phi_mux_next_state_2_phi_fu_85_p6;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln29_fu_141_p2;
wire   [7:0] next_state_6_fu_153_p3;
wire   [0:0] icmp_ln36_fu_147_p2;
wire   [7:0] next_state_1_fu_122_p3;
wire   [31:0] next_counter_3_fu_177_p2;
reg   [31:0] ap_phi_mux_next_counter_2_phi_fu_96_p6;
wire   [31:0] next_counter_1_fu_132_p3;
reg   [7:0] ap_sig_allocacmp_a_reg_out_load;
wire   [6:0] grp_fu_105_p4;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state_reg = 8'd0;
#0 counter = 32'd8;
#0 a_reg_out = 8'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_147_p2 == 1'd1) & (icmp_ln29_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        a_reg_out <= next_state_6_fu_153_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        counter <= ap_phi_mux_next_counter_2_phi_fu_96_p6;
        state_reg <= ap_phi_mux_next_state_2_phi_fu_85_p6;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln36_fu_147_p2 == 1'd0) & (icmp_ln29_fu_141_p2 == 1'd0))) begin
            ap_phi_mux_next_counter_2_phi_fu_96_p6 = next_counter_1_fu_132_p3;
        end else if (((icmp_ln36_fu_147_p2 == 1'd1) & (icmp_ln29_fu_141_p2 == 1'd0))) begin
            ap_phi_mux_next_counter_2_phi_fu_96_p6 = 32'd8;
        end else if ((icmp_ln29_fu_141_p2 == 1'd1)) begin
            ap_phi_mux_next_counter_2_phi_fu_96_p6 = next_counter_3_fu_177_p2;
        end else begin
            ap_phi_mux_next_counter_2_phi_fu_96_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_next_counter_2_phi_fu_96_p6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((icmp_ln36_fu_147_p2 == 1'd0) & (icmp_ln29_fu_141_p2 == 1'd0))) begin
            ap_phi_mux_next_state_2_phi_fu_85_p6 = next_state_1_fu_122_p3;
        end else if (((icmp_ln36_fu_147_p2 == 1'd1) & (icmp_ln29_fu_141_p2 == 1'd0))) begin
            ap_phi_mux_next_state_2_phi_fu_85_p6 = next_state_6_fu_153_p3;
        end else if ((icmp_ln29_fu_141_p2 == 1'd1)) begin
            ap_phi_mux_next_state_2_phi_fu_85_p6 = next_state_4_fu_168_p3;
        end else begin
            ap_phi_mux_next_state_2_phi_fu_85_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_next_state_2_phi_fu_85_p6 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_147_p2 == 1'd1) & (icmp_ln29_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_a_reg_out_load = next_state_6_fu_153_p3;
    end else begin
        ap_sig_allocacmp_a_reg_out_load = a_reg_out;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_147_p2 == 1'd1) & (icmp_ln29_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        end_conversion = 1'd1;
    end else if ((((icmp_ln36_fu_147_p2 == 1'd0) & (icmp_ln29_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln29_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        end_conversion = 1'd0;
    end else begin
        end_conversion = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a = ap_sig_allocacmp_a_reg_out_load;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign grp_fu_105_p4 = {{next_state_1_fu_122_p3[7:1]}};

assign icmp_ln29_fu_141_p2 = ((next_counter_1_fu_132_p3 < 32'd7) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_147_p2 = ((next_counter_1_fu_132_p3 == 32'd7) ? 1'b1 : 1'b0);

assign next_counter_1_fu_132_p3 = ((serial_start[0:0] == 1'b1) ? 32'd0 : counter);

assign next_counter_3_fu_177_p2 = (next_counter_1_fu_132_p3 + 32'd1);

assign next_state_1_fu_122_p3 = ((serial_start[0:0] == 1'b1) ? 8'd0 : state_reg);

assign next_state_4_fu_168_p3 = {{data}, {grp_fu_105_p4}};

assign next_state_6_fu_153_p3 = {{data}, {grp_fu_105_p4}};

endmodule //serial2parallel
