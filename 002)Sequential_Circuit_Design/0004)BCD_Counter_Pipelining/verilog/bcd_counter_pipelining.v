// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bcd_counter_pipelining_bcd_counter_pipelining,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.529000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=47,HLS_VERSION=2023_2}" *)

module bcd_counter_pipelining (
        ap_clk,
        ap_rst,
        pulse,
        seven_segment_data,
        seven_segment_enable
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] pulse;
output  [7:0] seven_segment_data;
output  [3:0] seven_segment_enable;

reg   [3:0] counter_state;
wire   [3:0] seven_segment_code_address0;
reg    seven_segment_code_ce0;
wire   [7:0] seven_segment_code_q0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [3:0] ap_phi_mux_counter_state_loc_0_phi_fu_86_p4;
wire   [3:0] select_ln16_fu_109_p3;
wire   [3:0] ap_phi_reg_pp0_iter0_counter_state_loc_0_reg_83;
wire   [0:0] pulse_read_read_fu_48_p2;
wire   [63:0] zext_ln26_fu_124_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln16_fu_97_p2;
wire   [3:0] add_ln22_fu_103_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 counter_state = 4'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bcd_counter_pipelining_seven_segment_code_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
seven_segment_code_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(seven_segment_code_address0),
    .ce0(seven_segment_code_ce0),
    .q0(seven_segment_code_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((pulse_read_read_fu_48_p2 == 1'd1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter_state <= select_ln16_fu_109_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((pulse_read_read_fu_48_p2 == 1'd0)) begin
        ap_phi_mux_counter_state_loc_0_phi_fu_86_p4 = counter_state;
    end else if ((pulse_read_read_fu_48_p2 == 1'd1)) begin
        ap_phi_mux_counter_state_loc_0_phi_fu_86_p4 = select_ln16_fu_109_p3;
    end else begin
        ap_phi_mux_counter_state_loc_0_phi_fu_86_p4 = ap_phi_reg_pp0_iter0_counter_state_loc_0_reg_83;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        seven_segment_code_ce0 = 1'b1;
    end else begin
        seven_segment_code_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_103_p2 = (counter_state + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_counter_state_loc_0_reg_83 = 'bx;

assign icmp_ln16_fu_97_p2 = ((counter_state == 4'd9) ? 1'b1 : 1'b0);

assign pulse_read_read_fu_48_p2 = pulse;

assign select_ln16_fu_109_p3 = ((icmp_ln16_fu_97_p2[0:0] == 1'b1) ? 4'd0 : add_ln22_fu_103_p2);

assign seven_segment_code_address0 = zext_ln26_fu_124_p1;

assign seven_segment_data = seven_segment_code_q0;

assign seven_segment_enable = 4'd14;

assign zext_ln26_fu_124_p1 = ap_phi_mux_counter_state_loc_0_phi_fu_86_p4;

endmodule //bcd_counter_pipelining
