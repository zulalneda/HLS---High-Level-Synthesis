// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="counter_counter,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.893929,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=79,HLS_VERSION=2023_2}" *)

module counter (
        ap_clk,
        ap_rst,
        count_button,
        seven_segment_data,
        seven_segment_enable
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] count_button;
output  [7:0] seven_segment_data;
output  [3:0] seven_segment_enable;

reg   [4:0] number;
wire   [4:0] next_number_fu_133_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] count_button_read_read_fu_80_p2;
wire   [7:0] code_fu_147_p23;
wire   [5:0] zext_ln103_fu_105_p1;
wire   [5:0] add_ln103_fu_109_p2;
wire   [0:0] icmp_ln103_fu_115_p2;
wire   [4:0] trunc_ln109_fu_121_p1;
wire   [4:0] select_ln103_fu_125_p3;
wire   [4:0] code_fu_147_p22;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire   [4:0] code_fu_147_p1;
wire   [4:0] code_fu_147_p3;
wire   [4:0] code_fu_147_p5;
wire   [4:0] code_fu_147_p7;
wire   [4:0] code_fu_147_p9;
wire   [4:0] code_fu_147_p11;
wire   [4:0] code_fu_147_p13;
wire   [4:0] code_fu_147_p15;
wire   [4:0] code_fu_147_p17;
wire   [4:0] code_fu_147_p19;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 number = 5'd0;
#0 ap_CS_fsm = 1'd1;
end

counter_sparsemux_21_5_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 5'h0 ),
    .din0_WIDTH( 8 ),
    .CASE1( 5'h1 ),
    .din1_WIDTH( 8 ),
    .CASE2( 5'h2 ),
    .din2_WIDTH( 8 ),
    .CASE3( 5'h3 ),
    .din3_WIDTH( 8 ),
    .CASE4( 5'h4 ),
    .din4_WIDTH( 8 ),
    .CASE5( 5'h5 ),
    .din5_WIDTH( 8 ),
    .CASE6( 5'h6 ),
    .din6_WIDTH( 8 ),
    .CASE7( 5'h7 ),
    .din7_WIDTH( 8 ),
    .CASE8( 5'h8 ),
    .din8_WIDTH( 8 ),
    .CASE9( 5'h9 ),
    .din9_WIDTH( 8 ),
    .def_WIDTH( 8 ),
    .sel_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
sparsemux_21_5_8_1_1_U1(
    .din0(8'd192),
    .din1(8'd249),
    .din2(8'd164),
    .din3(8'd176),
    .din4(8'd153),
    .din5(8'd146),
    .din6(8'd130),
    .din7(8'd248),
    .din8(8'd128),
    .din9(8'd144),
    .def(8'd192),
    .sel(code_fu_147_p22),
    .dout(code_fu_147_p23)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        number <= next_number_fu_133_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_109_p2 = (zext_ln103_fu_105_p1 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign code_fu_147_p22 = ((count_button[0:0] == 1'b1) ? select_ln103_fu_125_p3 : number);

assign count_button_read_read_fu_80_p2 = count_button;

assign icmp_ln103_fu_115_p2 = ((add_ln103_fu_109_p2 == 6'd10) ? 1'b1 : 1'b0);

assign next_number_fu_133_p3 = ((count_button[0:0] == 1'b1) ? select_ln103_fu_125_p3 : number);

assign select_ln103_fu_125_p3 = ((icmp_ln103_fu_115_p2[0:0] == 1'b1) ? 5'd0 : trunc_ln109_fu_121_p1);

assign seven_segment_data = code_fu_147_p23;

assign seven_segment_enable = 4'd14;

assign trunc_ln109_fu_121_p1 = add_ln103_fu_109_p2[4:0];

assign zext_ln103_fu_105_p1 = number;

endmodule //counter
