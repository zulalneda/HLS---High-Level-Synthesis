-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity counter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    count_button : IN STD_LOGIC_VECTOR (0 downto 0);
    seven_segment_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    seven_segment_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of counter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "counter_counter,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.893929,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=79,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_99 : STD_LOGIC_VECTOR (7 downto 0) := "10011001";
    constant ap_const_lv8_92 : STD_LOGIC_VECTOR (7 downto 0) := "10010010";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_F8 : STD_LOGIC_VECTOR (7 downto 0) := "11111000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal number : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal next_number_fu_133_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal count_button_read_read_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal code_fu_147_p23 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_fu_105_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln103_fu_109_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln103_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln109_fu_121_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln103_fu_125_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p22 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal code_fu_147_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p7 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p9 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p11 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p13 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p15 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p17 : STD_LOGIC_VECTOR (4 downto 0);
    signal code_fu_147_p19 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component counter_sparsemux_21_5_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (4 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (4 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (4 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (4 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (4 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (4 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (4 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (4 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (4 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (4 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sparsemux_21_5_8_1_1_U1 : component counter_sparsemux_21_5_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00000",
        din0_WIDTH => 8,
        CASE1 => "00001",
        din1_WIDTH => 8,
        CASE2 => "00010",
        din2_WIDTH => 8,
        CASE3 => "00011",
        din3_WIDTH => 8,
        CASE4 => "00100",
        din4_WIDTH => 8,
        CASE5 => "00101",
        din5_WIDTH => 8,
        CASE6 => "00110",
        din6_WIDTH => 8,
        CASE7 => "00111",
        din7_WIDTH => 8,
        CASE8 => "01000",
        din8_WIDTH => 8,
        CASE9 => "01001",
        din9_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_C0,
        din1 => ap_const_lv8_F9,
        din2 => ap_const_lv8_A4,
        din3 => ap_const_lv8_B0,
        din4 => ap_const_lv8_99,
        din5 => ap_const_lv8_92,
        din6 => ap_const_lv8_82,
        din7 => ap_const_lv8_F8,
        din8 => ap_const_lv8_80,
        din9 => ap_const_lv8_90,
        def => ap_const_lv8_C0,
        sel => code_fu_147_p22,
        dout => code_fu_147_p23);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                number <= next_number_fu_133_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln103_fu_109_p2 <= std_logic_vector(unsigned(zext_ln103_fu_105_p1) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    code_fu_147_p22 <= 
        select_ln103_fu_125_p3 when (count_button(0) = '1') else 
        number;
    count_button_read_read_fu_80_p2 <= count_button;
    icmp_ln103_fu_115_p2 <= "1" when (add_ln103_fu_109_p2 = ap_const_lv6_A) else "0";
    next_number_fu_133_p3 <= 
        select_ln103_fu_125_p3 when (count_button(0) = '1') else 
        number;
    select_ln103_fu_125_p3 <= 
        ap_const_lv5_0 when (icmp_ln103_fu_115_p2(0) = '1') else 
        trunc_ln109_fu_121_p1;
    seven_segment_data <= code_fu_147_p23;
    seven_segment_enable <= ap_const_lv4_E;
    trunc_ln109_fu_121_p1 <= add_ln103_fu_109_p2(5 - 1 downto 0);
    zext_ln103_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(number),6));
end behav;
