-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edge_detector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_signal : IN STD_LOGIC_VECTOR (0 downto 0);
    rising_edge_r : OUT STD_LOGIC_VECTOR (0 downto 0);
    falling_edge_r : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of edge_detector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "edge_detector_edge_detector,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.588000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=34,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal previous_input_signal : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_storemerge1_phi_fu_59_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal or_ln12_fu_77_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln17_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_71_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln17_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                previous_input_signal <= input_signal;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_phi_mux_storemerge1_phi_fu_59_p4_assign_proc : process(ap_CS_fsm_state1, or_ln12_fu_77_p2, xor_ln17_fu_89_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((or_ln12_fu_77_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_phi_fu_59_p4 <= xor_ln17_fu_89_p2;
            elsif ((or_ln12_fu_77_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_phi_fu_59_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_storemerge1_phi_fu_59_p4 <= "X";
            end if;
        else 
            ap_phi_mux_storemerge1_phi_fu_59_p4 <= "X";
        end if; 
    end process;

    falling_edge_r <= ap_phi_mux_storemerge1_phi_fu_59_p4;
    or_ln12_fu_77_p2 <= (xor_ln12_fu_71_p2 or previous_input_signal);
    or_ln17_fu_83_p2 <= (previous_input_signal or input_signal);

    rising_edge_r_assign_proc : process(ap_CS_fsm_state1, or_ln12_fu_77_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((or_ln12_fu_77_p2 = ap_const_lv1_1)) then 
                rising_edge_r <= ap_const_lv1_0;
            elsif ((or_ln12_fu_77_p2 = ap_const_lv1_0)) then 
                rising_edge_r <= ap_const_lv1_1;
            else 
                rising_edge_r <= "X";
            end if;
        else 
            rising_edge_r <= "X";
        end if; 
    end process;

    xor_ln12_fu_71_p2 <= (input_signal xor ap_const_lv1_1);
    xor_ln17_fu_89_p2 <= (or_ln17_fu_83_p2 xor ap_const_lv1_1);
end behav;
