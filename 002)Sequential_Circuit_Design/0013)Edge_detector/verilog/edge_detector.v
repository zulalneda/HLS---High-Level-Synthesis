// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="edge_detector_edge_detector,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.588000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=34,HLS_VERSION=2023_2}" *)

module edge_detector (
        ap_clk,
        ap_rst,
        input_signal,
        rising_edge_r,
        falling_edge_r
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] input_signal;
output  [0:0] rising_edge_r;
output  [0:0] falling_edge_r;

reg[0:0] rising_edge_r;

reg   [0:0] previous_input_signal;
reg   [0:0] ap_phi_mux_storemerge1_phi_fu_59_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] or_ln12_fu_77_p2;
wire   [0:0] xor_ln17_fu_89_p2;
wire   [0:0] xor_ln12_fu_71_p2;
wire   [0:0] or_ln17_fu_83_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 previous_input_signal = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        previous_input_signal <= input_signal;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln12_fu_77_p2 == 1'd1)) begin
            ap_phi_mux_storemerge1_phi_fu_59_p4 = xor_ln17_fu_89_p2;
        end else if ((or_ln12_fu_77_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1_phi_fu_59_p4 = 1'd0;
        end else begin
            ap_phi_mux_storemerge1_phi_fu_59_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_phi_fu_59_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((or_ln12_fu_77_p2 == 1'd1)) begin
            rising_edge_r = 1'd0;
        end else if ((or_ln12_fu_77_p2 == 1'd0)) begin
            rising_edge_r = 1'd1;
        end else begin
            rising_edge_r = 'bx;
        end
    end else begin
        rising_edge_r = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign falling_edge_r = ap_phi_mux_storemerge1_phi_fu_59_p4;

assign or_ln12_fu_77_p2 = (xor_ln12_fu_71_p2 | previous_input_signal);

assign or_ln17_fu_83_p2 = (previous_input_signal | input_signal);

assign xor_ln12_fu_71_p2 = (input_signal ^ 1'd1);

assign xor_ln17_fu_89_p2 = (or_ln17_fu_83_p2 ^ 1'd1);

endmodule //edge_detector
