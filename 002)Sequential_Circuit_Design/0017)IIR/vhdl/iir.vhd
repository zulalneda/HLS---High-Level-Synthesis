-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    y : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of iir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iir_iir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=257,HLS_SYN_LUT=242,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal xn1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal xn2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal yn1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal yn2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal xn1_load_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln20_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal yn1_load_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_1_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_1_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln20_fu_81_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal yn_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_yn1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln20_fu_59_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln20_1_fu_65_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_fu_71_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln20_3_fu_89_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_1_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln20_2_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln20_4_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln20_3_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_2_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln20_reg_179(31 downto 1) <= add_ln20_fu_97_p2(31 downto 1);
                sub_ln20_1_reg_189 <= sub_ln20_1_fu_129_p2;
                xn1_load_reg_174 <= xn1;
                yn1_load_reg_184 <= ap_sig_allocacmp_yn1_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                xn1 <= x;
                xn2 <= trunc_ln20_fu_81_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                yn1 <= yn_fu_157_p2;
                yn2 <= yn1_load_reg_184;
            end if;
        end if;
    end process;
    add_ln20_reg_179(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln20_1_fu_115_p2 <= std_logic_vector(unsigned(add_ln20_reg_179) + unsigned(xn1_load_reg_174));
    add_ln20_2_fu_151_p2 <= std_logic_vector(unsigned(sub_ln20_3_fu_145_p2) + unsigned(yn2));
    add_ln20_fu_97_p2 <= std_logic_vector(unsigned(sub_ln20_fu_71_p2) + unsigned(shl_ln20_3_fu_89_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_sig_allocacmp_yn1_load_assign_proc : process(yn1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, yn_fu_157_p2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_yn1_load <= yn_fu_157_p2;
        else 
            ap_sig_allocacmp_yn1_load <= yn1;
        end if; 
    end process;

    shl_ln20_1_fu_65_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln20_2_fu_123_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_yn1_load),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln20_3_fu_89_p3 <= (xn2 & ap_const_lv1_0);
    shl_ln20_4_fu_139_p2 <= std_logic_vector(shift_left(unsigned(yn2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln20_fu_59_p2 <= std_logic_vector(shift_left(unsigned(x),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    sub_ln20_1_fu_129_p2 <= std_logic_vector(unsigned(add_ln20_1_fu_115_p2) - unsigned(shl_ln20_2_fu_123_p2));
    sub_ln20_3_fu_145_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln20_4_fu_139_p2));
    sub_ln20_fu_71_p2 <= std_logic_vector(unsigned(shl_ln20_fu_59_p2) - unsigned(shl_ln20_1_fu_65_p2));
    trunc_ln20_fu_81_p1 <= xn1(31 - 1 downto 0);
    y <= std_logic_vector(unsigned(sub_ln20_1_reg_189) + unsigned(add_ln20_2_fu_151_p2));
    yn_fu_157_p2 <= std_logic_vector(unsigned(sub_ln20_1_reg_189) + unsigned(add_ln20_2_fu_151_p2));
end behav;
