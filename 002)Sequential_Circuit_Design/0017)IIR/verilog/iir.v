// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iir_iir,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=257,HLS_SYN_LUT=242,HLS_VERSION=2023_2}" *)

module iir (
        ap_clk,
        ap_rst,
        x,
        y
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [31:0] x;
output  [31:0] y;

reg   [31:0] xn1;
reg   [30:0] xn2;
reg   [31:0] yn1;
reg   [31:0] yn2;
reg   [31:0] xn1_load_reg_174;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln20_fu_97_p2;
reg   [31:0] add_ln20_reg_179;
reg   [31:0] yn1_load_reg_184;
wire   [31:0] sub_ln20_1_fu_129_p2;
reg   [31:0] sub_ln20_1_reg_189;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
wire   [30:0] trunc_ln20_fu_81_p1;
wire   [31:0] yn_fu_157_p2;
reg   [31:0] ap_sig_allocacmp_yn1_load;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] shl_ln20_fu_59_p2;
wire   [31:0] shl_ln20_1_fu_65_p2;
wire   [31:0] sub_ln20_fu_71_p2;
wire   [31:0] shl_ln20_3_fu_89_p3;
wire   [31:0] add_ln20_1_fu_115_p2;
wire   [31:0] shl_ln20_2_fu_123_p2;
wire   [31:0] shl_ln20_4_fu_139_p2;
wire   [31:0] sub_ln20_3_fu_145_p2;
wire   [31:0] add_ln20_2_fu_151_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 xn1 = 32'd0;
#0 xn2 = 31'd0;
#0 yn1 = 32'd0;
#0 yn2 = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln20_reg_179[31 : 1] <= add_ln20_fu_97_p2[31 : 1];
        sub_ln20_1_reg_189 <= sub_ln20_1_fu_129_p2;
        xn1_load_reg_174 <= xn1;
        yn1_load_reg_184 <= ap_sig_allocacmp_yn1_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xn1 <= x;
        xn2 <= trunc_ln20_fu_81_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        yn1 <= yn_fu_157_p2;
        yn2 <= yn1_load_reg_184;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_yn1_load = yn_fu_157_p2;
    end else begin
        ap_sig_allocacmp_yn1_load = yn1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_1_fu_115_p2 = (add_ln20_reg_179 + xn1_load_reg_174);

assign add_ln20_2_fu_151_p2 = (sub_ln20_3_fu_145_p2 + yn2);

assign add_ln20_fu_97_p2 = (sub_ln20_fu_71_p2 + shl_ln20_3_fu_89_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign shl_ln20_1_fu_65_p2 = x << 32'd1;

assign shl_ln20_2_fu_123_p2 = ap_sig_allocacmp_yn1_load << 32'd2;

assign shl_ln20_3_fu_89_p3 = {{xn2}, {1'd0}};

assign shl_ln20_4_fu_139_p2 = yn2 << 32'd2;

assign shl_ln20_fu_59_p2 = x << 32'd3;

assign sub_ln20_1_fu_129_p2 = (add_ln20_1_fu_115_p2 - shl_ln20_2_fu_123_p2);

assign sub_ln20_3_fu_145_p2 = (32'd0 - shl_ln20_4_fu_139_p2);

assign sub_ln20_fu_71_p2 = (shl_ln20_fu_59_p2 - shl_ln20_1_fu_65_p2);

assign trunc_ln20_fu_81_p1 = xn1[30:0];

assign y = (sub_ln20_1_reg_189 + add_ln20_2_fu_151_p2);

assign yn_fu_157_p2 = (sub_ln20_1_reg_189 + add_ln20_2_fu_151_p2);

always @ (posedge ap_clk) begin
    add_ln20_reg_179[0] <= 1'b0;
end

endmodule //iir
