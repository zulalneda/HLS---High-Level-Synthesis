// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="debouncer_debouncer,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.553000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=67,HLS_SYN_LUT=278,HLS_VERSION=2023_2}" *)

module debouncer (
        ap_clk,
        ap_rst,
        sw,
        out_r
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] sw;
output  [0:0] out_r;

reg   [0:0] state;
reg   [0:0] previous_sw;
reg   [63:0] counter;
wire   [0:0] select_ln20_fu_97_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] out_temp_1_fu_113_p3;
wire   [63:0] next_counter_2_fu_105_p3;
wire   [0:0] icmp_ln36_fu_65_p2;
wire   [63:0] next_counter_fu_71_p2;
wire   [0:0] xor_ln36_fu_77_p2;
wire   [0:0] xor_ln23_fu_91_p2;
wire   [63:0] next_counter_1_fu_83_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 1'd0;
#0 previous_sw = 1'd0;
#0 counter = 64'd500;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        counter <= next_counter_2_fu_105_p3;
        previous_sw <= out_temp_1_fu_113_p3;
        state <= select_ln20_fu_97_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign icmp_ln36_fu_65_p2 = ((counter == 64'd0) ? 1'b1 : 1'b0);

assign next_counter_1_fu_83_p3 = ((icmp_ln36_fu_65_p2[0:0] == 1'b1) ? 64'd500 : next_counter_fu_71_p2);

assign next_counter_2_fu_105_p3 = ((state[0:0] == 1'b1) ? next_counter_1_fu_83_p3 : 64'd500);

assign next_counter_fu_71_p2 = ($signed(counter) + $signed(64'd18446744073709551615));

assign out_r = ((state[0:0] == 1'b1) ? previous_sw : sw);

assign out_temp_1_fu_113_p3 = ((state[0:0] == 1'b1) ? previous_sw : sw);

assign select_ln20_fu_97_p3 = ((state[0:0] == 1'b1) ? xor_ln36_fu_77_p2 : xor_ln23_fu_91_p2);

assign xor_ln23_fu_91_p2 = (sw ^ previous_sw);

assign xor_ln36_fu_77_p2 = (icmp_ln36_fu_65_p2 ^ 1'd1);

endmodule //debouncer
