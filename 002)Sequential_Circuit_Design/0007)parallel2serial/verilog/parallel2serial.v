// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="parallel2serial_parallel2serial,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.140429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=172,HLS_VERSION=2023_2}" *)

module parallel2serial (
        ap_clk,
        ap_rst,
        a,
        data,
        serial_start,
        serial_end,
        begin_r
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [7:0] a;
output  [0:0] data;
output  [0:0] serial_start;
output  [0:0] serial_end;
input  [0:0] begin_r;

reg[0:0] data;
reg[0:0] serial_start;
reg[0:0] serial_end;

reg   [31:0] count;
reg   [31:0] ap_phi_mux_count_new_2_phi_fu_90_p8;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] select_ln23_fu_112_p3;
wire   [31:0] add_ln47_fu_135_p2;
wire   [0:0] icmp_ln43_fu_129_p2;
wire   [0:0] trunc_ln6_fu_103_p1;
wire   [0:0] bit_select_i_fu_146_p3;
wire   [7:0] trunc_ln47_fu_142_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_condition_38;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 count = 32'd8;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        count <= ap_phi_mux_count_new_2_phi_fu_90_p8;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if ((~(select_ln23_fu_112_p3 == 32'd7) & ~(select_ln23_fu_112_p3 == 32'd0) & (icmp_ln43_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_count_new_2_phi_fu_90_p8 = add_ln47_fu_135_p2;
    end else if (((~(select_ln23_fu_112_p3 == 32'd7) & ~(select_ln23_fu_112_p3 == 32'd0) & (icmp_ln43_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((select_ln23_fu_112_p3 == 32'd7) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_count_new_2_phi_fu_90_p8 = 32'd8;
    end else if (((select_ln23_fu_112_p3 == 32'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_count_new_2_phi_fu_90_p8 = 32'd1;
    end else begin
        ap_phi_mux_count_new_2_phi_fu_90_p8 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_38)) begin
            data = bit_select_i_fu_146_p3;
        end else if ((select_ln23_fu_112_p3 == 32'd0)) begin
            data = trunc_ln6_fu_103_p1;
        end else if ((select_ln23_fu_112_p3 == 32'd7)) begin
            data = a[32'd7];
        end else begin
            data = 'bx;
        end
    end else begin
        data = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln23_fu_112_p3 == 32'd7) & ~(select_ln23_fu_112_p3 == 32'd0) & (1'b1 == ap_CS_fsm_state1)) | ((select_ln23_fu_112_p3 == 32'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        serial_end = 1'd0;
    end else if (((select_ln23_fu_112_p3 == 32'd7) & (1'b1 == ap_CS_fsm_state1))) begin
        serial_end = 1'd1;
    end else begin
        serial_end = 'bx;
    end
end

always @ (*) begin
    if (((select_ln23_fu_112_p3 == 32'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        serial_start = 1'd1;
    end else if (((~(select_ln23_fu_112_p3 == 32'd7) & ~(select_ln23_fu_112_p3 == 32'd0) & (1'b1 == ap_CS_fsm_state1)) | ((select_ln23_fu_112_p3 == 32'd7) & (1'b1 == ap_CS_fsm_state1)))) begin
        serial_start = 1'd0;
    end else begin
        serial_start = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln47_fu_135_p2 = (select_ln23_fu_112_p3 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_38 = (~(select_ln23_fu_112_p3 == 32'd7) & ~(select_ln23_fu_112_p3 == 32'd0) & (icmp_ln43_fu_129_p2 == 1'd1));
end

assign bit_select_i_fu_146_p3 = a[trunc_ln47_fu_142_p1];

assign icmp_ln43_fu_129_p2 = (($signed(select_ln23_fu_112_p3) < $signed(32'd7)) ? 1'b1 : 1'b0);

assign select_ln23_fu_112_p3 = ((begin_r[0:0] == 1'b1) ? 32'd0 : count);

assign trunc_ln47_fu_142_p1 = select_ln23_fu_112_p3[7:0];

assign trunc_ln6_fu_103_p1 = a[0:0];

endmodule //parallel2serial
