-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parallel2serial is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (7 downto 0);
    data : OUT STD_LOGIC_VECTOR (0 downto 0);
    serial_start : OUT STD_LOGIC_VECTOR (0 downto 0);
    serial_end : OUT STD_LOGIC_VECTOR (0 downto 0);
    begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of parallel2serial is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parallel2serial_parallel2serial,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.140429,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=172,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    signal ap_phi_mux_count_new_2_phi_fu_90_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal select_ln23_fu_112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_103_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_select_i_fu_146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln47_fu_142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_38 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                count <= ap_phi_mux_count_new_2_phi_fu_90_p8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln47_fu_135_p2 <= std_logic_vector(unsigned(select_ln23_fu_112_p3) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_condition_38_assign_proc : process(select_ln23_fu_112_p3, icmp_ln43_fu_129_p2)
    begin
                ap_condition_38 <= (not((select_ln23_fu_112_p3 = ap_const_lv32_7)) and not((select_ln23_fu_112_p3 = ap_const_lv32_0)) and (icmp_ln43_fu_129_p2 = ap_const_lv1_1));
    end process;


    ap_phi_mux_count_new_2_phi_fu_90_p8_assign_proc : process(ap_CS_fsm_state1, select_ln23_fu_112_p3, add_ln47_fu_135_p2, icmp_ln43_fu_129_p2)
    begin
        if ((not((select_ln23_fu_112_p3 = ap_const_lv32_7)) and not((select_ln23_fu_112_p3 = ap_const_lv32_0)) and (icmp_ln43_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_count_new_2_phi_fu_90_p8 <= add_ln47_fu_135_p2;
        elsif (((not((select_ln23_fu_112_p3 = ap_const_lv32_7)) and not((select_ln23_fu_112_p3 = ap_const_lv32_0)) and (icmp_ln43_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((select_ln23_fu_112_p3 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_count_new_2_phi_fu_90_p8 <= ap_const_lv32_8;
        elsif (((select_ln23_fu_112_p3 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_count_new_2_phi_fu_90_p8 <= ap_const_lv32_1;
        else 
            ap_phi_mux_count_new_2_phi_fu_90_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bit_select_i_fu_146_p3 <= a(to_integer(unsigned(trunc_ln47_fu_142_p1)) downto to_integer(unsigned(trunc_ln47_fu_142_p1))) when (to_integer(unsigned(trunc_ln47_fu_142_p1)) >= 0 and to_integer(unsigned(trunc_ln47_fu_142_p1)) <=7) else "-";

    data_assign_proc : process(a, ap_CS_fsm_state1, select_ln23_fu_112_p3, trunc_ln6_fu_103_p1, bit_select_i_fu_146_p3, ap_condition_38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_38)) then 
                data <= bit_select_i_fu_146_p3;
            elsif ((select_ln23_fu_112_p3 = ap_const_lv32_0)) then 
                data <= trunc_ln6_fu_103_p1;
            elsif ((select_ln23_fu_112_p3 = ap_const_lv32_7)) then 
                data <= a(7 downto 7);
            else 
                data <= "X";
            end if;
        else 
            data <= "X";
        end if; 
    end process;

    icmp_ln43_fu_129_p2 <= "1" when (signed(select_ln23_fu_112_p3) < signed(ap_const_lv32_7)) else "0";
    select_ln23_fu_112_p3 <= 
        ap_const_lv32_0 when (begin_r(0) = '1') else 
        count;

    serial_end_assign_proc : process(ap_CS_fsm_state1, select_ln23_fu_112_p3)
    begin
        if (((not((select_ln23_fu_112_p3 = ap_const_lv32_7)) and not((select_ln23_fu_112_p3 = ap_const_lv32_0)) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((select_ln23_fu_112_p3 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            serial_end <= ap_const_lv1_0;
        elsif (((select_ln23_fu_112_p3 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            serial_end <= ap_const_lv1_1;
        else 
            serial_end <= "X";
        end if; 
    end process;


    serial_start_assign_proc : process(ap_CS_fsm_state1, select_ln23_fu_112_p3)
    begin
        if (((select_ln23_fu_112_p3 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            serial_start <= ap_const_lv1_1;
        elsif (((not((select_ln23_fu_112_p3 = ap_const_lv32_7)) and not((select_ln23_fu_112_p3 = ap_const_lv32_0)) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((select_ln23_fu_112_p3 = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            serial_start <= ap_const_lv1_0;
        else 
            serial_start <= "X";
        end if; 
    end process;

    trunc_ln47_fu_142_p1 <= select_ln23_fu_112_p3(8 - 1 downto 0);
    trunc_ln6_fu_103_p1 <= a(1 - 1 downto 0);
end behav;
