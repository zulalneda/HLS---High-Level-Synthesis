// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="one_digit_bcd_counter_one_digit_bcd_counter,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.529000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=58,HLS_VERSION=2023_2}" *)

module one_digit_bcd_counter (
        ap_clk,
        ap_rst,
        pulse,
        seven_segment_data,
        seven_segment_enable
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [0:0] pulse;
output  [7:0] seven_segment_data;
output  [3:0] seven_segment_enable;

reg   [3:0] counter_state;
wire   [3:0] seven_segment_code_address0;
reg    seven_segment_code_ce0;
wire   [7:0] seven_segment_code_q0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] select_ln14_fu_105_p3;
reg   [3:0] ap_phi_mux_counter_state_loc_0_phi_fu_82_p4;
wire   [0:0] pulse_read_read_fu_44_p2;
wire   [63:0] zext_ln24_fu_120_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_93_p2;
wire   [3:0] add_ln20_fu_99_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 counter_state = 4'd0;
#0 ap_CS_fsm = 2'd1;
end

one_digit_bcd_counter_seven_segment_code_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
seven_segment_code_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(seven_segment_code_address0),
    .ce0(seven_segment_code_ce0),
    .q0(seven_segment_code_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((pulse_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        counter_state <= select_ln14_fu_105_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((pulse_read_read_fu_44_p2 == 1'd0)) begin
            ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 = counter_state;
        end else if ((pulse_read_read_fu_44_p2 == 1'd1)) begin
            ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 = select_ln14_fu_105_p3;
        end else begin
            ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        seven_segment_code_ce0 = 1'b1;
    end else begin
        seven_segment_code_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_99_p2 = (counter_state + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln14_fu_93_p2 = ((counter_state == 4'd9) ? 1'b1 : 1'b0);

assign pulse_read_read_fu_44_p2 = pulse;

assign select_ln14_fu_105_p3 = ((icmp_ln14_fu_93_p2[0:0] == 1'b1) ? 4'd0 : add_ln20_fu_99_p2);

assign seven_segment_code_address0 = zext_ln24_fu_120_p1;

assign seven_segment_data = seven_segment_code_q0;

assign seven_segment_enable = 4'd14;

assign zext_ln24_fu_120_p1 = ap_phi_mux_counter_state_loc_0_phi_fu_82_p4;

endmodule //one_digit_bcd_counter
