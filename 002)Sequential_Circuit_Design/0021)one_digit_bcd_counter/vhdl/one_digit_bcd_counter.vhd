-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity one_digit_bcd_counter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    pulse : IN STD_LOGIC_VECTOR (0 downto 0);
    seven_segment_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    seven_segment_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of one_digit_bcd_counter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "one_digit_bcd_counter_one_digit_bcd_counter,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.529000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14,HLS_SYN_LUT=58,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal counter_state : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal seven_segment_code_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seven_segment_code_ce0 : STD_LOGIC;
    signal seven_segment_code_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal select_ln14_fu_105_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal pulse_read_read_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_fu_99_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component one_digit_bcd_counter_seven_segment_code_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    seven_segment_code_U : component one_digit_bcd_counter_seven_segment_code_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seven_segment_code_address0,
        ce0 => seven_segment_code_ce0,
        q0 => seven_segment_code_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((pulse_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                counter_state <= select_ln14_fu_105_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln20_fu_99_p2 <= std_logic_vector(unsigned(counter_state) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_phi_mux_counter_state_loc_0_phi_fu_82_p4_assign_proc : process(counter_state, ap_CS_fsm_state1, select_ln14_fu_105_p3, pulse_read_read_fu_44_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((pulse_read_read_fu_44_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 <= counter_state;
            elsif ((pulse_read_read_fu_44_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 <= select_ln14_fu_105_p3;
            else 
                ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 <= "XXXX";
            end if;
        else 
            ap_phi_mux_counter_state_loc_0_phi_fu_82_p4 <= "XXXX";
        end if; 
    end process;

    icmp_ln14_fu_93_p2 <= "1" when (counter_state = ap_const_lv4_9) else "0";
    pulse_read_read_fu_44_p2 <= pulse;
    select_ln14_fu_105_p3 <= 
        ap_const_lv4_0 when (icmp_ln14_fu_93_p2(0) = '1') else 
        add_ln20_fu_99_p2;
    seven_segment_code_address0 <= zext_ln24_fu_120_p1(4 - 1 downto 0);

    seven_segment_code_ce0_assign_proc : process(ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            seven_segment_code_ce0 <= ap_const_logic_1;
        else 
            seven_segment_code_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    seven_segment_data <= seven_segment_code_q0;
    seven_segment_enable <= ap_const_lv4_E;
    zext_ln24_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_counter_state_loc_0_phi_fu_82_p4),64));
end behav;
